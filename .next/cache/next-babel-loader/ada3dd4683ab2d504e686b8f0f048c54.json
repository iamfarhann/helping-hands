{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/FYP-FE/helping-hands/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import React, { Fragment } from \"react\";\n// import { Modal } from \"@redq/reuse-modal\";\n// import \"@redq/reuse-modal/es/index.css\";\n// export default ({ Component, pageProps }) => {\n//   return (\n//     <Fragment>\n//       <Modal />\n//       <Component {...pageProps} />\n//     </Fragment>\n//   );\n// };\nimport React from \"react\";\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport { Modal } from \"@redq/reuse-modal\";\nimport { createMuiTheme, ThemeProvider, StylesProvider, responsiveFontSizes } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport withApollo from \"next-with-apollo\"; // import ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getDataFromTree } from \"@apollo/react-ssr\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloLink } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { RestLink } from \"apollo-link-rest\";\nimport Nodefetch from \"node-fetch\";\nimport theme from \"../theme\";\nimport getToken from \"../lib/getToken\";\nimport { UserProvider } from \"../lib/userData\";\nglobal.Headers = Nodefetch.Headers;\nconst restLink = new RestLink({\n  uri: process.env.PLAIN_URL,\n  credentials: \"same-origin\"\n});\nconst httpLink = new HttpLink({\n  uri: process.env.SERVER_URL,\n  credentials: \"same-origin\"\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = getToken();\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      accept: \"application/json\",\n      authorization: token ? `Bearer ${token}` : \"\"\n    })\n  };\n});\n\nclass MyApp extends App {\n  componentDidMount() {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector(\"#jss-server-side\");\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      apollo,\n      router\n    } = this.props;\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, __jsx(ThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, __jsx(ApolloProvider, {\n      client: apollo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, __jsx(UserProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, __jsx(Modal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }), __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }))))));\n  }\n\n}\n\nexport default withApollo(({\n  initialState\n}) => new ApolloClient({\n  link: ApolloLink.from([restLink, authLink, httpLink]),\n  cache: new InMemoryCache().restore(initialState || {})\n}), {\n  getDataFromTree\n})(MyApp);","map":{"version":3,"sources":["/Users/mahad/Local Disk/FYP-FE/helping-hands/pages/_app.js"],"names":["React","App","Head","Modal","createMuiTheme","ThemeProvider","StylesProvider","responsiveFontSizes","CssBaseline","withApollo","ApolloClient","createHttpLink","InMemoryCache","ApolloProvider","getDataFromTree","setContext","ApolloLink","HttpLink","RestLink","Nodefetch","theme","getToken","UserProvider","global","Headers","restLink","uri","process","env","PLAIN_URL","credentials","httpLink","SERVER_URL","authLink","_","headers","token","accept","authorization","MyApp","componentDidMount","jssStyles","document","querySelector","parentElement","removeChild","render","Component","pageProps","apollo","router","props","initialState","link","from","cache","restore"],"mappings":"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","sourcesContent":["// import React, { Fragment } from \"react\";\n// import { Modal } from \"@redq/reuse-modal\";\n// import \"@redq/reuse-modal/es/index.css\";\n\n// export default ({ Component, pageProps }) => {\n//   return (\n//     <Fragment>\n//       <Modal />\n//       <Component {...pageProps} />\n//     </Fragment>\n//   );\n// };\n\nimport React from \"react\";\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport { Modal } from \"@redq/reuse-modal\";\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  StylesProvider,\n  responsiveFontSizes,\n} from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport withApollo from \"next-with-apollo\";\n// import ApolloClient, { InMemoryCache } from 'apollo-boost';\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getDataFromTree } from \"@apollo/react-ssr\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloLink } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { RestLink } from \"apollo-link-rest\";\nimport Nodefetch from \"node-fetch\";\nimport theme from \"../theme\";\nimport getToken from \"../lib/getToken\";\nimport { UserProvider } from \"../lib/userData\";\n\nglobal.Headers = Nodefetch.Headers;\n\nconst restLink = new RestLink({\n  uri: process.env.PLAIN_URL,\n  credentials: \"same-origin\",\n});\n\nconst httpLink = new HttpLink({\n  uri: process.env.SERVER_URL,\n  credentials: \"same-origin\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = getToken();\n  return {\n    headers: {\n      ...headers,\n      accept: \"application/json\",\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nclass MyApp extends App {\n  componentDidMount() {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector(\"#jss-server-side\");\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }\n\n  render() {\n    const { Component, pageProps, apollo, router } = this.props;\n\n    return (\n      <React.Fragment>\n        {/* <Head>\n          <title>Trilla App</title>\n          <meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />\n        </Head> */}\n\n        <ThemeProvider theme={theme}>\n          {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n          {/* <CssBaseline /> */}\n          <ApolloProvider client={apollo}>\n            <UserProvider>\n              <Modal />\n              <Component {...pageProps} />\n            </UserProvider>\n          </ApolloProvider>\n        </ThemeProvider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApollo(\n  ({ initialState }) =>\n    new ApolloClient({\n      link: ApolloLink.from([restLink, authLink, httpLink]),\n      cache: new InMemoryCache().restore(initialState || {}),\n    }),\n  { getDataFromTree }\n)(MyApp);\n"]},"metadata":{},"sourceType":"module"}