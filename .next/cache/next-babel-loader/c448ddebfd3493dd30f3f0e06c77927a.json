{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Box, Container, Grid, Divider } from \"@material-ui/core\";\nimport Text from \"../Text\";\nimport Heading from \"../Heading\";\nimport { GET_PROJECT_UPDATES } from \"../../../../lib/queries\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport moment from \"moment\";\nimport FsLightbox from \"fslightbox-react\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: \"100%\"\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1)\n    },\n    actionsContainer: {\n      marginBottom: theme.spacing(2)\n    },\n    resetContainer: {\n      padding: theme.spacing(3)\n    }\n  };\n});\n\nfunction getSteps() {\n  return [\"Update # 3\", \"Update # 2\", \"Update # 1\"];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return \"For each ad campaign that you create, you can control how much\\n              you're willing to spend on clicks and conversions, which networks\\n              and geographical locations you want your ads to show on, and more.\";\n\n    case 1:\n      return \"An ad group contains one or more ads which target a shared set of keywords.\";\n\n    case 2:\n      return \"Try out different ad text to see what brings in the most customers,\\n              and learn how to enhance your ads using features like ad extensions.\\n              If you run into any problems with your ads, find out how to tell if\\n              they're running and how to resolve approval issues.\";\n\n    default:\n      return \"Unknown step\";\n  }\n}\n\nexport default function UpdateStepper(_ref) {\n  var project = _ref.project;\n\n  var _useQuery = useQuery(GET_PROJECT_UPDATES, {\n    variables: {\n      where: {\n        project: project ? project.id : \"\"\n      },\n      sort: \"createdAt:desc\",\n      start: 0,\n      limit: null\n    },\n    skip: !project\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch;\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1]; //const steps = getSteps();\n\n\n  var _useState = useState([]),\n      steps = _useState[0],\n      setSteps = _useState[1];\n\n  useEffect(function () {\n    if (data) {\n      console.log(data, \"Updates\");\n      setSteps(data.updates);\n    }\n  }, [data]);\n\n  var handleNext = function handleNext() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep + 1;\n    });\n  };\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n  };\n\n  var _useState2 = useState(false),\n      toggler = _useState2[0],\n      setToggler = _useState2[1];\n\n  var _useState3 = useState(false),\n      coverToggler = _useState3[0],\n      setCoverToggler = _useState3[1];\n\n  var _useState4 = useState(0),\n      imageSlide = _useState4[0],\n      setImageSlider = _useState4[1];\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    orientation: \"vertical\"\n  }, steps.map(function (updateData, index) {\n    return __jsx(Step, {\n      key: updateData.id\n    }, __jsx(StepLabel, null, \" \", __jsx(Heading, {\n      as: \"h3\",\n      color: \"#060F1E\",\n      content: \"Project Update on \".concat(moment(updateData.createAt).format(\"MMMM Do, YYYY\")),\n      style: {\n        padding: \"0px\",\n        margin: \"0px\"\n      }\n    })), __jsx(StepContent, null, __jsx(Text, {\n      color: \"#060F1E\",\n      content: updateData.update\n    }), __jsx(FsLightbox, {\n      toggler: toggler,\n      type: \"image\",\n      sources: updateData ? updateData.images.map(function (pic) {\n        return \"\".concat(process.env.PLAIN_URL).concat(pic.url);\n      }) : [],\n      slide: imageSlide\n    }), updateData.images.map(function (item, index) {\n      return __jsx(\"img\", {\n        onClick: function onClick() {\n          setToggler(!toggler);\n          setImageSlider(index + 1);\n        },\n        src: \"\".concat(process.env.PLAIN_URL).concat(item.url),\n        style: {\n          borderRadius: 4,\n          objectFit: \"cover\",\n          margin: 2,\n          height: \"80px\",\n          width: \"80px\",\n          cursor: \"pointer\"\n        }\n      });\n    }), __jsx(\"div\", {\n      className: classes.actionsContainer\n    }, __jsx(\"div\", null, __jsx(Button, {\n      disabled: activeStep === 0,\n      onClick: handleBack,\n      className: classes.button\n    }, \"Back\"), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleNext,\n      className: classes.button\n    }, activeStep === steps.length - 1 ? \"Finish\" : \"Next\")))));\n  })), activeStep === steps.length && __jsx(Paper, {\n    square: true,\n    elevation: 0,\n    className: classes.resetContainer\n  }, __jsx(Typography, null, \"All steps completed - you're finished\"), __jsx(Button, {\n    onClick: handleReset,\n    className: classes.button\n  }, \"Reset\")));\n}","map":null,"metadata":{},"sourceType":"module"}