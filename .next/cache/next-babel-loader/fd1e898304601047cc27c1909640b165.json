{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Checkbox/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport useToggle from '../useToggle';\nimport CheckBoxStyle from './checkbox.style';\n\nconst CheckBox = _ref => {\n  let {\n    className,\n    isChecked,\n    labelText,\n    value,\n    id,\n    htmlFor,\n    labelPosition,\n    isMaterial,\n    disabled\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isChecked\", \"labelText\", \"value\", \"id\", \"htmlFor\", \"labelPosition\", \"isMaterial\", \"disabled\"]); // use toggle hooks\n\n\n  const [toggleValue, toggleHandler] = useToggle(isChecked); // Add all classs to an array\n\n  const addAllClasses = ['reusecore__checkbox']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // label control\n\n\n  const LabelField = labelText && __jsx(\"span\", {\n    className: \"reusecore__field-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, labelText);\n\n  const position = labelPosition || 'right';\n  return __jsx(CheckBoxStyle, _extends({\n    className: addAllClasses.join(' ')\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }), __jsx(\"label\", {\n    htmlFor: htmlFor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, position === 'left' || position === 'right' ? LabelField : '', __jsx(\"input\", _extends({\n    type: \"checkbox\",\n    className: \"checkbox\",\n    id: id,\n    value: value,\n    checked: toggleValue,\n    onChange: toggleHandler,\n    disabled: disabled\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })));\n};\n\nCheckBox.propTypes = {\n  /** ClassName of the Checkbox */\n  className: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelText: PropTypes.string,\n\n  /**\n   * Note: id and htmlFor must be same.\n   */\n  htmlFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Set checkbox id in number || string */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** value of the checkbox field */\n  value: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelPosition: PropTypes.oneOf(['right', 'left']),\n\n  /** Checkbox toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** disabled of the checkbox field */\n  disabled: PropTypes.bool\n};\n/** Checkbox default proptype */\n\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false\n};\nexport default CheckBox;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Checkbox/index.js"],"names":["CheckBox","disabled","props","useToggle","addAllClasses","labelPosition","LabelField","labelText","position","className","PropTypes","htmlFor","id","value","isChecked","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport useToggle from '../useToggle';\nimport CheckBoxStyle from './checkbox.style';\n\nconst CheckBox = ({\n  className,\n  isChecked,\n  labelText,\n  value,\n  id,\n  htmlFor,\n  labelPosition,\n  isMaterial,\n  disabled,\n  ...props\n}) => {\n  // use toggle hooks\n  const [toggleValue, toggleHandler] = useToggle(isChecked);\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__checkbox'];\n\n  // Add label position class\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  }\n\n  // isMaterial prop checking\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // label control\n  const LabelField = labelText && (\n    <span className=\"reusecore__field-label\">{labelText}</span>\n  );\n\n  const position = labelPosition || 'right';\n\n  return (\n    <CheckBoxStyle className={addAllClasses.join(' ')} {...props}>\n      <label htmlFor={htmlFor}>\n        {position === 'left' || position === 'right' ? LabelField : ''}\n        <input\n          type=\"checkbox\"\n          className=\"checkbox\"\n          id={id}\n          value={value}\n          checked={toggleValue}\n          onChange={toggleHandler}\n          disabled={disabled}\n          {...props}\n        />\n        <div />\n      </label>\n    </CheckBoxStyle>\n  );\n};\n\nCheckBox.propTypes = {\n  /** ClassName of the Checkbox */\n  className: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelText: PropTypes.string,\n\n  /**\n   * Note: id and htmlFor must be same.\n   */\n  htmlFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Set checkbox id in number || string */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** value of the checkbox field */\n  value: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelPosition: PropTypes.oneOf(['right', 'left']),\n\n  /** Checkbox toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** disabled of the checkbox field */\n  disabled: PropTypes.bool,\n};\n\n/** Checkbox default proptype */\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false,\n};\nexport default CheckBox;\n"]},"metadata":{},"sourceType":"module"}