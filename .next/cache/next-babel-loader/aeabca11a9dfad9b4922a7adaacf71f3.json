{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/FYP-FE/helping-hands/common/src/components/Drawer/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nconst Drawer = (_ref) => {\n  let {\n    className,\n    children,\n    closeButton,\n    closeButtonStyle,\n    drawerHandler,\n    toggleHandler,\n    open\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"closeButton\", \"closeButtonStyle\", \"drawerHandler\", \"toggleHandler\", \"open\"]);\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__drawer']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(RcDrawer, _extends({\n    open: open,\n    onClose: toggleHandler,\n    className: addAllClasses.join(' ')\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"reusecore-drawer__close\",\n    onClick: toggleHandler,\n    style: closeButtonStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, closeButton), children), __jsx(\"div\", {\n    className: \"reusecore-drawer__handler\",\n    style: {\n      display: 'inline-block'\n    },\n    onClick: toggleHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, drawerHandler));\n};\n\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  // drawerHandler: PropTypes.element.isRequired\n  drawerHandler: PropTypes.element\n};\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null\n};\nexport default Drawer;","map":{"version":3,"sources":["/Users/mahad/Local Disk/FYP-FE/helping-hands/common/src/components/Drawer/index.js"],"names":["React","Fragment","PropTypes","RcDrawer","Drawer","className","children","closeButton","closeButtonStyle","drawerHandler","toggleHandler","open","props","addAllClasses","push","join","display","propTypes","string","element","width","placement","oneOf","defaultProps","handler","level"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,4BAAP;;AAEA,MAAMC,MAAM,GAAG,UAST;AAAA,MATU;AACdC,IAAAA,SADc;AAEdC,IAAAA,QAFc;AAGdC,IAAAA,WAHc;AAIdC,IAAAA,gBAJc;AAKdC,IAAAA,aALc;AAMdC,IAAAA,aANc;AAOdC,IAAAA;AAPc,GASV;AAAA,MADDC,KACC;;AACJ;AACA,QAAMC,aAAa,GAAG,CAAC,mBAAD,CAAtB,CAFI,CAIJ;;AACA,MAAIR,SAAJ,EAAe;AACbQ,IAAAA,aAAa,CAACC,IAAd,CAAmBT,SAAnB;AACD;;AAED,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,IAAI,EAAEM,IADR;AAEE,IAAA,OAAO,EAAED,aAFX;AAGE,IAAA,SAAS,EAAEG,aAAa,CAACE,IAAd,CAAmB,GAAnB;AAHb,KAIMH,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAME;AACE,IAAA,SAAS,EAAC,yBADZ;AAEE,IAAA,OAAO,EAAEF,aAFX;AAGE,IAAA,KAAK,EAAEF,gBAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGD,WALH,CANF,EAaGD,QAbH,CADF,EAgBE;AACE,IAAA,SAAS,EAAC,2BADZ;AAEE,IAAA,KAAK,EAAE;AAAEU,MAAAA,OAAO,EAAE;AAAX,KAFT;AAGE,IAAA,OAAO,EAAEN,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGD,aALH,CAhBF,CADF;AA0BD,CA5CD;;AA8CAL,MAAM,CAACa,SAAP,GAAmB;AACjB;AACAZ,EAAAA,SAAS,EAAEH,SAAS,CAACgB,MAFJ;;AAIjB;AACAX,EAAAA,WAAW,EAAEL,SAAS,CAACiB,OALN;;AAOjB;AACAC,EAAAA,KAAK,EAAElB,SAAS,CAACgB,MARA;;AAUjB;AACAG,EAAAA,SAAS,EAAEnB,SAAS,CAACoB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,QAAzB,CAAhB,CAXM;;AAajB;AACA;AACAb,EAAAA,aAAa,EAAEP,SAAS,CAACiB;AAfR,CAAnB;AAkBAf,MAAM,CAACmB,YAAP,GAAsB;AACpBH,EAAAA,KAAK,EAAE,OADa;AAEpBI,EAAAA,OAAO,EAAE,KAFW;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;AAMA,eAAerB,MAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nconst Drawer = ({\n  className,\n  children,\n  closeButton,\n  closeButtonStyle,\n  drawerHandler,\n  toggleHandler,\n  open,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__drawer'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <Fragment>\n      <RcDrawer\n        open={open}\n        onClose={toggleHandler}\n        className={addAllClasses.join(' ')}\n        {...props}\n      >\n        <div\n          className=\"reusecore-drawer__close\"\n          onClick={toggleHandler}\n          style={closeButtonStyle}\n        >\n          {closeButton}\n        </div>\n        {children}\n      </RcDrawer>\n      <div\n        className=\"reusecore-drawer__handler\"\n        style={{ display: 'inline-block' }}\n        onClick={toggleHandler}\n      >\n        {drawerHandler}\n      </div>\n    </Fragment>\n  );\n};\n\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  // drawerHandler: PropTypes.element.isRequired\n  drawerHandler: PropTypes.element,\n};\n\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null,\n};\n\nexport default Drawer;\n"]},"metadata":{},"sourceType":"module"}