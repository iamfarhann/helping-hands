{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/RadioGroup/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ComponentWrapper from './radioGroup.style';\n\nconst RadioGroup = ({\n  className,\n  name,\n  value,\n  items,\n  onUpdate\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    value: value\n  });\n\n  const onChange = e => {\n    const currentValue = e.target.value;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      value: currentValue\n    }));\n    onUpdate(e.target.value);\n  };\n\n  const addAllClasses = ['radio_group'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(ComponentWrapper, {\n    className: addAllClasses.join(' '),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, items.map(item => __jsx(\"label\", {\n    htmlFor: item.title.toLowerCase().split(' ').join('-'),\n    key: `radio__group-id${item.id}`,\n    className: state.value === item.value ? 'active' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    id: item.title.toLowerCase().split(' ').join('-'),\n    name: name,\n    onChange: onChange,\n    value: item.value,\n    checked: state.value === item.value,\n    disabled: item.disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }), item.title || item.text ? __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, item.title && item.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, item.text && item.text)) : '')));\n};\n\nRadioGroup.propTypes = {\n  /** className of the RadioGroup. */\n  className: PropTypes.string,\n\n  /** title or value of the RadioGroup. */\n  title: PropTypes.string,\n\n  /** text or sub title for single radio component / element. */\n  text: PropTypes.string,\n\n  /** active item value of the RadioGroup. The prop should be a string but in camelCase. */\n  value: PropTypes.string,\n\n  /** RadioGroup data in array of object form. Each object item should has 3 properties id, title and text. */\n  items: PropTypes.array,\n\n  /** This prop contain active radio field value.*/\n  onUpdate: PropTypes.func\n};\n/** RadioGroup default type. */\n\nRadioGroup.defaultProps = {\n  onUpdate: () => {}\n};\nexport default RadioGroup;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/RadioGroup/index.js"],"names":["RadioGroup","onUpdate","setState","useState","value","onChange","e","currentValue","addAllClasses","items","item","id","state","className","PropTypes","title","text","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ComponentWrapper from './radioGroup.style';\n\nconst RadioGroup = ({ className, name, value, items, onUpdate }) => {\n  const [state, setState] = useState({ value: value });\n\n  const onChange = e => {\n    const currentValue = e.target.value;\n    setState({\n      ...state,\n      value: currentValue,\n    });\n    onUpdate(e.target.value);\n  };\n\n  const addAllClasses = ['radio_group'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <ComponentWrapper className={addAllClasses.join(' ')}>\n      {items.map(item => (\n        <label\n          htmlFor={item.title\n            .toLowerCase()\n            .split(' ')\n            .join('-')}\n          key={`radio__group-id${item.id}`}\n          className={state.value === item.value ? 'active' : ''}\n        >\n          <input\n            type=\"radio\"\n            id={item.title\n              .toLowerCase()\n              .split(' ')\n              .join('-')}\n            name={name}\n            onChange={onChange}\n            value={item.value}\n            checked={state.value === item.value}\n            disabled={item.disabled}\n          />\n          {item.title || item.text ? (\n            <div className=\"content\">\n              <h4>{item.title && item.title}</h4>\n              <p>{item.text && item.text}</p>\n            </div>\n          ) : (\n            ''\n          )}\n        </label>\n      ))}\n    </ComponentWrapper>\n  );\n};\n\nRadioGroup.propTypes = {\n  /** className of the RadioGroup. */\n  className: PropTypes.string,\n  /** title or value of the RadioGroup. */\n  title: PropTypes.string,\n  /** text or sub title for single radio component / element. */\n  text: PropTypes.string,\n  /** active item value of the RadioGroup. The prop should be a string but in camelCase. */\n  value: PropTypes.string,\n  /** RadioGroup data in array of object form. Each object item should has 3 properties id, title and text. */\n  items: PropTypes.array,\n  /** This prop contain active radio field value.*/\n  onUpdate: PropTypes.func,\n};\n\n/** RadioGroup default type. */\nRadioGroup.defaultProps = {\n  onUpdate: () => {},\n};\n\nexport default RadioGroup;\n"]},"metadata":{},"sourceType":"module"}