{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/RadioGroup/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ComponentWrapper from './radioGroup.style';\n\nconst RadioGroup = ({\n  className,\n  name,\n  value,\n  items,\n  onUpdate\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    value: value\n  });\n\n  const onChange = e => {\n    const currentValue = e.target.value;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      value: currentValue\n    }));\n    onUpdate(e.target.value);\n  };\n\n  const addAllClasses = ['radio_group'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(ComponentWrapper, {\n    className: addAllClasses.join(' '),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, items.map(item => __jsx(\"label\", {\n    htmlFor: item.title.toLowerCase().split(' ').join('-'),\n    key: `radio__group-id${item.id}`,\n    className: state.value === item.value ? 'active' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    id: item.title.toLowerCase().split(' ').join('-'),\n    name: name,\n    onChange: onChange,\n    value: item.value,\n    checked: state.value === item.value,\n    disabled: item.disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }), item.title || item.text ? __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, item.title && item.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, item.text && item.text)) : '')));\n};\n\nRadioGroup.propTypes = {\n  /** className of the RadioGroup. */\n  className: PropTypes.string,\n\n  /** title or value of the RadioGroup. */\n  title: PropTypes.string,\n\n  /** text or sub title for single radio component / element. */\n  text: PropTypes.string,\n\n  /** active item value of the RadioGroup. The prop should be a string but in camelCase. */\n  value: PropTypes.string,\n\n  /** RadioGroup data in array of object form. Each object item should has 3 properties id, title and text. */\n  items: PropTypes.array,\n\n  /** This prop contain active radio field value.*/\n  onUpdate: PropTypes.func\n};\n/** RadioGroup default type. */\n\nRadioGroup.defaultProps = {\n  onUpdate: () => {}\n};\nexport default RadioGroup;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/RadioGroup/index.js"],"names":["React","useState","PropTypes","ComponentWrapper","RadioGroup","className","name","value","items","onUpdate","state","setState","onChange","e","currentValue","target","addAllClasses","push","join","map","item","title","toLowerCase","split","id","disabled","text","propTypes","string","array","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ComponentWrapper from './radioGroup.style';\n\nconst RadioGroup = ({ className, name, value, items, onUpdate }) => {\n  const [state, setState] = useState({ value: value });\n\n  const onChange = e => {\n    const currentValue = e.target.value;\n    setState({\n      ...state,\n      value: currentValue,\n    });\n    onUpdate(e.target.value);\n  };\n\n  const addAllClasses = ['radio_group'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <ComponentWrapper className={addAllClasses.join(' ')}>\n      {items.map(item => (\n        <label\n          htmlFor={item.title\n            .toLowerCase()\n            .split(' ')\n            .join('-')}\n          key={`radio__group-id${item.id}`}\n          className={state.value === item.value ? 'active' : ''}\n        >\n          <input\n            type=\"radio\"\n            id={item.title\n              .toLowerCase()\n              .split(' ')\n              .join('-')}\n            name={name}\n            onChange={onChange}\n            value={item.value}\n            checked={state.value === item.value}\n            disabled={item.disabled}\n          />\n          {item.title || item.text ? (\n            <div className=\"content\">\n              <h4>{item.title && item.title}</h4>\n              <p>{item.text && item.text}</p>\n            </div>\n          ) : (\n            ''\n          )}\n        </label>\n      ))}\n    </ComponentWrapper>\n  );\n};\n\nRadioGroup.propTypes = {\n  /** className of the RadioGroup. */\n  className: PropTypes.string,\n  /** title or value of the RadioGroup. */\n  title: PropTypes.string,\n  /** text or sub title for single radio component / element. */\n  text: PropTypes.string,\n  /** active item value of the RadioGroup. The prop should be a string but in camelCase. */\n  value: PropTypes.string,\n  /** RadioGroup data in array of object form. Each object item should has 3 properties id, title and text. */\n  items: PropTypes.array,\n  /** This prop contain active radio field value.*/\n  onUpdate: PropTypes.func,\n};\n\n/** RadioGroup default type. */\nRadioGroup.defaultProps = {\n  onUpdate: () => {},\n};\n\nexport default RadioGroup;\n"]},"metadata":{},"sourceType":"module"}