{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Input/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputField, { EyeButton } from './input.style';\n\nvar Input = function Input(_ref) {\n  _s2();\n\n  _s();\n\n  var label = _ref.label,\n      value = _ref.value,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onChange = _ref.onChange,\n      inputType = _ref.inputType,\n      isMaterial = _ref.isMaterial,\n      icon = _ref.icon,\n      iconPosition = _ref.iconPosition,\n      passwordShowHide = _ref.passwordShowHide,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"label\", \"value\", \"onBlur\", \"onFocus\", \"onChange\", \"inputType\", \"isMaterial\", \"icon\", \"iconPosition\", \"passwordShowHide\", \"className\"]); // use toggle hooks\n\n\n  var _useState = useState({\n    toggle: false,\n    focus: false,\n    value: ''\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // toggle function\n\n\n  var handleToggle = function handleToggle() {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      toggle: !state.toggle\n    }));\n  }; // add focus class\n\n\n  var handleOnFocus = function handleOnFocus(event) {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      focus: true\n    }));\n    onFocus(event);\n  }; // remove focus class\n\n\n  var handleOnBlur = function handleOnBlur(event) {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      focus: false\n    }));\n    onBlur(event);\n  }; // handle input value\n\n\n  var handleOnChange = function handleOnChange(event) {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      value: event.target.value\n    }));\n    onChange(event.target.value);\n  }; // get input focus class\n\n\n  var getInputFocusClass = function getInputFocusClass() {\n    if (state.focus === true || state.value !== '') {\n      return 'is-focus';\n    } else {\n      return '';\n    }\n  }; // init variable\n\n\n  var inputElement, htmlFor; // Add all classs to an array\n\n  var addAllClasses = ['reusecore__input']; // Add is-material class\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // Add icon position class if input element has icon\n\n\n  if (icon && iconPosition) {\n    addAllClasses.push(\"icon-\".concat(iconPosition));\n  } // Add new class\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // if lable is not empty\n\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // Label position\n\n\n  var LabelPosition = isMaterial === true ? 'bottom' : 'top'; // Label field\n\n  var LabelField = label && __jsx(\"label\", {\n    htmlFor: htmlFor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 31\n    }\n  }, label); // Input type check\n\n\n  switch (inputType) {\n    case 'textarea':\n      inputElement = __jsx(\"textarea\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }));\n      break;\n\n    case 'password':\n      inputElement = __jsx(\"div\", {\n        className: \"field-wrapper\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, __jsx(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: state.toggle ? 'password' : 'text',\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      })), passwordShowHide && __jsx(EyeButton, {\n        onClick: handleToggle,\n        className: state.toggle ? 'eye' : 'eye-closed',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      })));\n      break;\n\n    default:\n      inputElement = __jsx(\"div\", {\n        className: \"field-wrapper\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }\n      }, __jsx(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: inputType,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      })), icon && __jsx(\"span\", {\n        className: \"input-icon\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 20\n        }\n      }, icon));\n  }\n\n  return __jsx(InputField, {\n    className: \"\".concat(addAllClasses.join(' '), \" \").concat(getInputFocusClass()),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, LabelPosition === 'top' && LabelField, inputElement, isMaterial && __jsx(\"span\", {\n    className: \"highlight\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 22\n    }\n  }), LabelPosition === 'bottom' && LabelField);\n};\n/** Inout prop type checking. */\n\n\n_s2(Input, \"Y/bIpSxhKYHQKr5mXLYAIS6jtYM=\");\n\n_c2 = Input;\n\n_s(Input, \"WpK39GAHpY5OSzCdOue7dvJUmgk=\");\n\n_c = Input;\nInput.propTypes = {\n  /** className of the Input component. */\n  className: PropTypes.string,\n\n  /** Set input label value. */\n  label: PropTypes.string,\n\n  /** The input value, required for a controlled component. */\n  value: PropTypes.oneOf(['string', 'number']),\n\n  /** Make default input into material style input. */\n  isMaterial: PropTypes.bool,\n\n  /** Password show hide icon button prop [*only for password field]. */\n  passwordShowHide: PropTypes.bool,\n\n  /** Set input type of the input element. Default type is text. */\n  inputType: PropTypes.oneOf(['text', 'email', 'password', 'number', 'textarea']),\n\n  /** Add icon in input field. This prop will not work with password\n   * and textarea field.\n   */\n  icon: PropTypes.object,\n\n  /** Set input field icon position. Default position is 'left'. */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func\n};\n/** Inout default type. */\n\nInput.defaultProps = {\n  inputType: 'text',\n  isMaterial: false,\n  iconPosition: 'left',\n  onBlur: function onBlur() {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {}\n};\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Input/index.js"],"names":["Input","label","value","onBlur","onFocus","onChange","inputType","isMaterial","icon","iconPosition","passwordShowHide","className","props","state","setState","useState","toggle","focus","handleToggle","handleOnFocus","handleOnBlur","handleOnChange","event","getInputFocusClass","addAllClasses","htmlFor","LabelPosition","LabelField","inputElement","PropTypes","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputField, { EyeButton } from './input.style';\nconst Input = ({\n  label,\n  value,\n  onBlur,\n  onFocus,\n  onChange,\n  inputType,\n  isMaterial,\n  icon,\n  iconPosition,\n  passwordShowHide,\n  className,\n  ...props\n}) => {\n  // use toggle hooks\n  const [state, setState] = useState({\n    toggle: false,\n    focus: false,\n    value: '',\n  });\n\n  // toggle function\n  const handleToggle = () => {\n    setState({\n      ...state,\n      toggle: !state.toggle,\n    });\n  };\n\n  // add focus class\n  const handleOnFocus = event => {\n    setState({\n      ...state,\n      focus: true,\n    });\n    onFocus(event);\n  };\n\n  // remove focus class\n  const handleOnBlur = event => {\n    setState({\n      ...state,\n      focus: false,\n    });\n    onBlur(event);\n  };\n\n  // handle input value\n  const handleOnChange = event => {\n    setState({\n      ...state,\n      value: event.target.value,\n    });\n    onChange(event.target.value);\n  };\n\n  // get input focus class\n  const getInputFocusClass = () => {\n    if (state.focus === true || state.value !== '') {\n      return 'is-focus';\n    } else {\n      return '';\n    }\n  };\n\n  // init variable\n  let inputElement, htmlFor;\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__input'];\n\n  // Add is-material class\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  // Add icon position class if input element has icon\n  if (icon && iconPosition) {\n    addAllClasses.push(`icon-${iconPosition}`);\n  }\n\n  // Add new class\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // if lable is not empty\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  }\n\n  // Label position\n  const LabelPosition = isMaterial === true ? 'bottom' : 'top';\n\n  // Label field\n  const LabelField = label && <label htmlFor={htmlFor}>{label}</label>;\n\n  // Input type check\n  switch (inputType) {\n    case 'textarea':\n      inputElement = (\n        <textarea\n          {...props}\n          id={htmlFor}\n          name={htmlFor}\n          value={state.value}\n          onChange={handleOnChange}\n          onBlur={handleOnBlur}\n          onFocus={handleOnFocus}\n        />\n      );\n      break;\n\n    case 'password':\n      inputElement = (\n        <div className=\"field-wrapper\">\n          <input\n            {...props}\n            id={htmlFor}\n            name={htmlFor}\n            type={state.toggle ? 'password' : 'text'}\n            value={state.value}\n            onChange={handleOnChange}\n            onBlur={handleOnBlur}\n            onFocus={handleOnFocus}\n          />\n          {passwordShowHide && (\n            <EyeButton\n              onClick={handleToggle}\n              className={state.toggle ? 'eye' : 'eye-closed'}\n            >\n              <span />\n            </EyeButton>\n          )}\n        </div>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <div className=\"field-wrapper\">\n          <input\n            {...props}\n            id={htmlFor}\n            name={htmlFor}\n            type={inputType}\n            value={state.value}\n            onChange={handleOnChange}\n            onBlur={handleOnBlur}\n            onFocus={handleOnFocus}\n          />\n          {icon && <span className=\"input-icon\">{icon}</span>}\n        </div>\n      );\n  }\n\n  return (\n    <InputField\n      className={`${addAllClasses.join(' ')} ${getInputFocusClass()}`}\n    >\n      {LabelPosition === 'top' && LabelField}\n      {inputElement}\n      {isMaterial && <span className=\"highlight\" />}\n      {LabelPosition === 'bottom' && LabelField}\n    </InputField>\n  );\n};\n\n/** Inout prop type checking. */\nInput.propTypes = {\n  /** className of the Input component. */\n  className: PropTypes.string,\n\n  /** Set input label value. */\n  label: PropTypes.string,\n\n  /** The input value, required for a controlled component. */\n  value: PropTypes.oneOf(['string', 'number']),\n\n  /** Make default input into material style input. */\n  isMaterial: PropTypes.bool,\n\n  /** Password show hide icon button prop [*only for password field]. */\n  passwordShowHide: PropTypes.bool,\n\n  /** Set input type of the input element. Default type is text. */\n  inputType: PropTypes.oneOf([\n    'text',\n    'email',\n    'password',\n    'number',\n    'textarea',\n  ]),\n\n  /** Add icon in input field. This prop will not work with password\n   * and textarea field.\n   */\n  icon: PropTypes.object,\n\n  /** Set input field icon position. Default position is 'left'. */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func,\n};\n\n/** Inout default type. */\nInput.defaultProps = {\n  inputType: 'text',\n  isMaterial: false,\n  iconPosition: 'left',\n  onBlur: () => {},\n  onFocus: () => {},\n  onChange: () => {},\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}