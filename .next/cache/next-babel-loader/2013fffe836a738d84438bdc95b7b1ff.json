{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/ScrollSpyMenu/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nvar ScrollSpyMenu = function ScrollSpyMenu(_ref) {\n  _s2();\n\n  _s();\n\n  var className = _ref.className,\n      menuItems = _ref.menuItems,\n      drawerClose = _ref.drawerClose,\n      props = _objectWithoutProperties(_ref, [\"className\", \"menuItems\", \"drawerClose\"]);\n\n  var _useContext = useContext(DrawerContext),\n      dispatch = _useContext.dispatch; // empty array for scrollspy items\n\n\n  var scrollItems = []; // convert menu path to scrollspy items\n\n  menuItems.forEach(function (item) {\n    scrollItems.push(item.path.slice(1));\n  }); // Add all classs to an array\n\n  var addAllClasses = ['scrollspy__menu']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Close drawer when click on menu item\n\n\n  var toggleDrawer = function toggleDrawer() {\n    dispatch({\n      type: 'TOGGLE'\n    });\n  };\n\n  return __jsx(Scrollspy, _extends({\n    items: scrollItems,\n    className: addAllClasses.join(' '),\n    drawerClose: drawerClose\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }), menuItems.map(function (menu, index) {\n    return __jsx(\"li\", {\n      key: \"menu-item-\".concat(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, menu.staticLink ? __jsx(\"a\", {\n      href: menu.path,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, menu.label) : __jsx(React.Fragment, null, drawerClose ? __jsx(AnchorLink, {\n      href: menu.path,\n      offset: menu.offset,\n      onClick: toggleDrawer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, menu.label) : __jsx(AnchorLink, {\n      href: menu.path,\n      offset: menu.offset,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, menu.label)));\n  }));\n};\n\n_s2(ScrollSpyMenu, \"ySleuVEGUHOXu8arixTynPLQ8z8=\");\n\n_c2 = ScrollSpyMenu;\n\n_s(ScrollSpyMenu, \"y0TpHjmA0G5gpKtNPtwKueTIMNE=\");\n\n_c = ScrollSpyMenu;\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\n   * data.\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\n   * Function to be executed when the active item has been updated [optional].\n   */\n  onUpdate: PropTypes.func\n};\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current'\n};\nexport default ScrollSpyMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScrollSpyMenu\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"ScrollSpyMenu\");","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/ScrollSpyMenu/index.js"],"names":["ScrollSpyMenu","className","menuItems","drawerClose","props","dispatch","useContext","scrollItems","item","addAllClasses","toggleDrawer","type","menu","PropTypes","currentClassName","scrolledPastClassName","componentTag","style","offset","rootEl","onUpdate","func"],"mappings":";;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,iBAAA;AACA,OAAA,UAAA,MAAA,iCAAA;AAEA,SAAA,aAAA,QAAA,8BAAA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAAqD;AAAA;;AAAA,EAAA,EAAA;;AAAA,MAAlDC,SAAkD,GAAA,IAAA,CAAlDA,SAAkD;AAAA,MAAvCC,SAAuC,GAAA,IAAA,CAAvCA,SAAuC;AAAA,MAA5BC,WAA4B,GAAA,IAAA,CAA5BA,WAA4B;AAAA,MAAZC,KAAY,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,WAAA,EAAA,aAAA,CAAA,CAAA;;AAAA,MAAA,WAAA,GACpDE,UAAU,CAD0C,aAC1C,CAD0C;AAAA,MACjED,QADiE,GAAA,WAAA,CAAA,QAAA,CAAA,CAEzE;;;AACA,MAAME,WAAW,GAHwD,EAGzE,CAHyE,CAKzE;;AACAL,EAAAA,SAAS,CAATA,OAAAA,CAAkB,UAAA,IAAA,EAAQ;AACxBK,IAAAA,WAAW,CAAXA,IAAAA,CAAiBC,IAAI,CAAJA,IAAAA,CAAAA,KAAAA,CAAjBD,CAAiBC,CAAjBD;AAPuE,GAMzEL,EANyE,CAUzE;;AACA,MAAMO,aAAa,GAAG,CAXmD,iBAWnD,CAAtB,CAXyE,CAazE;;AACA,MAAA,SAAA,EAAe;AACbA,IAAAA,aAAa,CAAbA,IAAAA,CAAAA,SAAAA;AAfuE,GAAA,CAkBzE;;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE;AADC,KAAD,CAARN;AADF,GAAA;;AAMA,SACE,KAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EADP,WAAA;AAEE,IAAA,SAAS,EAAEI,aAAa,CAAbA,IAAAA,CAFb,GAEaA,CAFb;AAGE,IAAA,WAAW,EAAEN;AAHf,GAAA,EAAA,KAAA,EAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAMG,SAAS,CAAT,GAAA,CAAc,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,WACb,KAAA,CAAA,IAAA,EAAA;AAAI,MAAA,GAAG,EAAA,aAAA,MAAA,CAAP,KAAO,CAAP;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,EACGS,IAAI,CAAJA,UAAAA,GACC,KAAA,CAAA,GAAA,EAAA;AAAG,MAAA,IAAI,EAAEA,IAAI,CAAb,IAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,EAAqBA,IAAI,CAD1BA,KACC,CADDA,GAGC,KAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACGT,WAAW,GACV,KAAA,CAAA,UAAA,EAAA;AACE,MAAA,IAAI,EAAES,IAAI,CADZ,IAAA;AAEE,MAAA,MAAM,EAAEA,IAAI,CAFd,MAAA;AAGE,MAAA,OAAO,EAHT,YAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,EAKGA,IAAI,CANG,KACV,CADU,GASV,KAAA,CAAA,UAAA,EAAA;AAAY,MAAA,IAAI,EAAEA,IAAI,CAAtB,IAAA;AAA6B,MAAA,MAAM,EAAEA,IAAI,CAAzC,MAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,EACGA,IAAI,CAhBF,KAeL,CAVJ,CAJJ,CADa;AAPnB,GAOK,CANH,CADF;AAzBF,CAAA;;IAAMZ,a;;MAAAA,a;;GAAAA,a;;KAAAA,a;AA2DNA,aAAa,CAAbA,SAAAA,GAA0B;AACxB;AACAC,EAAAA,SAAS,EAAEY,SAAS,CAFI,MAAA;;AAIxB;;;AAGAX,EAAAA,SAAS,EAAEW,SAAS,CAATA,KAAAA,CAPa,UAAA;;AASxB;AACAC,EAAAA,gBAAgB,EAAED,SAAS,CAVH,MAAA;;AAYxB;AACAE,EAAAA,qBAAqB,EAAEF,SAAS,CAbR,MAAA;;AAexB;AACAG,EAAAA,YAAY,EAAEH,SAAS,CAhBC,MAAA;;AAkBxB;AACAI,EAAAA,KAAK,EAAEJ,SAAS,CAnBQ,MAAA;;AAqBxB;AACAK,EAAAA,MAAM,EAAEL,SAAS,CAtBO,MAAA;;AAwBxB;AACAM,EAAAA,MAAM,EAAEN,SAAS,CAzBO,MAAA;;AA2BxB;;;AAGAO,EAAAA,QAAQ,EAAEP,SAAS,CAACQ;AA9BI,CAA1BrB;AAiCAA,aAAa,CAAbA,YAAAA,GAA6B;AAC3BgB,EAAAA,YAAY,EADe,IAAA;AAE3BF,EAAAA,gBAAgB,EAAE;AAFS,CAA7Bd;AAKA,eAAA,aAAA","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\n\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nconst ScrollSpyMenu = ({ className, menuItems, drawerClose, ...props }) => {\n  const { dispatch } = useContext(DrawerContext);\n  // empty array for scrollspy items\n  const scrollItems = [];\n\n  // convert menu path to scrollspy items\n  menuItems.forEach(item => {\n    scrollItems.push(item.path.slice(1));\n  });\n\n  // Add all classs to an array\n  const addAllClasses = ['scrollspy__menu'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // Close drawer when click on menu item\n  const toggleDrawer = () => {\n    dispatch({\n      type: 'TOGGLE',\n    });\n  };\n\n  return (\n    <Scrollspy\n      items={scrollItems}\n      className={addAllClasses.join(' ')}\n      drawerClose={drawerClose}\n      {...props}\n    >\n      {menuItems.map((menu, index) => (\n        <li key={`menu-item-${index}`}>\n          {menu.staticLink ? (\n            <a href={menu.path}>{menu.label}</a>\n          ) : (\n            <>\n              {drawerClose ? (\n                <AnchorLink\n                  href={menu.path}\n                  offset={menu.offset}\n                  onClick={toggleDrawer}\n                >\n                  {menu.label}\n                </AnchorLink>\n              ) : (\n                <AnchorLink href={menu.path} offset={menu.offset}>\n                  {menu.label}\n                </AnchorLink>\n              )}\n            </>\n          )}\n        </li>\n      ))}\n    </Scrollspy>\n  );\n};\n\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\n   * data.\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\n   * Function to be executed when the active item has been updated [optional].\n   */\n  onUpdate: PropTypes.func,\n};\n\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current',\n};\n\nexport default ScrollSpyMenu;\n"]},"metadata":{},"sourceType":"module"}