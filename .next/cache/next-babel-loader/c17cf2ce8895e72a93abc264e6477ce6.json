{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport react, { useEffect, useState } from \"react\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport { Box, Container, Typography, Grid, Paper, Avatar, Divider } from \"@material-ui/core\";\nimport Text from \"../Text\";\nimport { GET_PROJECT_REVIEWS } from \"../../../../lib/queries\";\nimport { CREATE_REVIEW } from \"../../../../lib/mutations\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport moment from \"moment\";\nimport Button from \"../../../../common/src/components/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useData, useDispatchUser } from \"../../../../lib/userData\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nexport default function ReviewCard({\n  project\n}) {\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(GET_PROJECT_REVIEWS, {\n    variables: {\n      where: {\n        project: project ? project.id : \"\"\n      },\n      sort: \"createdAt:desc\",\n      start: 0,\n      limit: null\n    },\n    skip: !project,\n    fetchPolicy: \"cache-and-network\"\n  });\n  const donor = useData();\n  const {\n    0: createLoading,\n    1: setCreateLoading\n  } = useState(false);\n  const {\n    0: createError,\n    1: setCreateError\n  } = useState(\"\");\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [value, setValue] = React.useState(2);\n  useEffect(() => {\n    if (data) {\n      console.log(data, \"Reviews\");\n      console.log(value, \"Rating\");\n    }\n  }, [data, value]);\n  const [createReview] = useMutation(CREATE_REVIEW, {\n    onCompleted: data => {\n      console.log(data);\n      refetch();\n      handleClose(); // dispatch({\n      //   type: \"UPDATE\",\n      //   payload: data.updateOrganization.organization,\n      // });\n\n      setCreateError(\"Review Added succesfully!\");\n      setCreateLoading(false);\n      handleReset();\n    },\n    onError: error => {\n      console.log(error);\n      setCreateError(\"Sorry an error occurred. Please try again!\");\n    }\n  });\n  const schemas = [{\n    review: Yup.string().required(\"Please enter a review\"),\n    rating: Yup.number().required(\"Please enter rating\")\n  }];\n  const {\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    handleReset,\n    values,\n    touched,\n    errors,\n    setFieldValue\n  } = useFormik({\n    initialValues: {\n      review: \"\",\n      rating: 0\n    },\n    onSubmit: values => {\n      console.log(\"Review On Submit\");\n      console.log(values);\n      setCreateLoading(true);\n      setCreateError(null);\n      createReview({\n        variables: {\n          fields: {\n            data: {\n              donor: donor.id,\n              project: project.id,\n              rating: values.rating,\n              review: values.review\n            }\n          }\n        }\n      });\n    },\n    validationSchema: Yup.object().shape(schemas[0])\n  });\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      overflow: \"auto\",\n      maxHeight: \"600px\"\n    }\n  }, data ? data.reviews.map(review => {\n    return __jsx(Box, {\n      p: 2,\n      mb: 2,\n      borderLeft: 5,\n      borderBottom: 0.5,\n      borderRadius: 4,\n      borderColor: \"#3E2672\"\n    }, __jsx(Grid, {\n      container: true,\n      alignItems: \"center\"\n    }, __jsx(Grid, {\n      item: true,\n      md: 2,\n      style: {\n        marginRight: \"10px\",\n        marginBottom: \"10px\"\n      }\n    }, __jsx(Avatar, {\n      alt: review.donor.fullName,\n      src: review.donor.profilePicture ? `${process.env.PLAIN_URL}${review.donor.profilePicture.url}` : null\n    })), __jsx(Grid, {\n      item: true,\n      md: 8\n    }, __jsx(Typography, {\n      variant: \"body 1\",\n      style: {\n        fontWeight: \"bold\"\n      }\n    }, review.donor.fullName, \" \", __jsx(\"br\", null)), __jsx(Rating, {\n      name: \"read-only\",\n      size: \"small\",\n      value: review.rating,\n      readOnly: true\n    })), __jsx(Grid, {\n      item: true,\n      md: 1\n    }, __jsx(MoreVertIcon, null)), __jsx(Grid, {\n      item: true,\n      md: 12\n    }, __jsx(Text, {\n      color: \"#060F1E\",\n      content: review.review\n    }))));\n  }) : __jsx(React.Fragment, null, __jsx(Box, {\n    p: 2,\n    m: 2,\n    borderLeft: 5,\n    borderBottom: 0.5,\n    borderRadius: 4,\n    borderColor: \"#3E2672\"\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    md: 2,\n    style: {\n      marginRight: \"10px\",\n      marginBottom: \"10px\"\n    }\n  }, __jsx(Skeleton, {\n    animation: \"wave\",\n    variant: \"circle\",\n    width: 40,\n    height: 40\n  })), __jsx(Grid, {\n    item: true,\n    md: 8\n  }, __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 10,\n    width: \"80%\"\n  }), __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 10,\n    width: \"40%\"\n  })), __jsx(Grid, {\n    item: true,\n    md: 1\n  }, __jsx(MoreVertIcon, null)), __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 20,\n    width: \"100%\"\n  }), __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 20,\n    width: \"100%\"\n  }), __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 20,\n    width: \"40%\"\n  })))), __jsx(Box, {\n    p: 2,\n    m: 2,\n    borderLeft: 5,\n    borderBottom: 0.5,\n    borderRadius: 4,\n    borderColor: \"#3E2672\"\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    md: 2,\n    style: {\n      marginRight: \"10px\",\n      marginBottom: \"10px\"\n    }\n  }, __jsx(Skeleton, {\n    animation: \"wave\",\n    variant: \"circle\",\n    width: 40,\n    height: 40\n  })), __jsx(Grid, {\n    item: true,\n    md: 8\n  }, __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 10,\n    width: \"80%\"\n  }), __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 10,\n    width: \"40%\"\n  })), __jsx(Grid, {\n    item: true,\n    md: 1\n  }, __jsx(MoreVertIcon, null)), __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 20,\n    width: \"100%\"\n  }), __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 20,\n    width: \"100%\"\n  }), __jsx(Skeleton, {\n    animation: \"wave\",\n    height: 20,\n    width: \"70%\"\n  }))))) //else\n  ), donor[\"id\"] ? donor.user.role.name == \"Donor\" ? __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    p: 2\n  }, __jsx(Button, {\n    title: \"Write a Review\",\n    onClick: handleClickOpen,\n    style: {\n      marginTop: \"18px\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      minWidth: \"auto\",\n      height: \"auto\",\n      border: \"0\",\n      fontSize: \"15px\",\n      fontWeight: \"700\",\n      borderRadius: \"30px\",\n      cursor: \"pointer\",\n      color: \"#FFFFFF\",\n      backgroundColor: \"#05B890\",\n      position: \"relative\",\n      overflow: \"hidden\",\n      zIndex: \"1\"\n    }\n  }), __jsx(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\"\n  }, __jsx(DialogTitle, {\n    id: \"form-dialog-title\"\n  }, \"Project Review\"), __jsx(DialogContent, null, __jsx(DialogContentText, null, \"Let others know what are your thoughts on this project!\"), __jsx(Rating, {\n    name: \"rating\",\n    value: values.rating,\n    onChange: (event, newValue) => {\n      setFieldValue(\"rating\", newValue);\n    }\n  }), __jsx(TextField, {\n    autoFocus: true,\n    name: \"review\",\n    value: values.review,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.review && touched.review,\n    helperText: errors.review && touched.review ? errors.review : null,\n    id: \"name\",\n    label: \"Review\",\n    type: \"review\",\n    fullWidth: true\n  })), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleClose,\n    title: \"Cancel\",\n    variant: \"extendedFab\"\n  }), __jsx(Button, {\n    title: \"Submit\",\n    variant: \"extendedFab\",\n    onClick: handleSubmit,\n    disabled: createLoading,\n    isLoading: createLoading\n  })))) : null : null);\n}","map":null,"metadata":{},"sourceType":"module"}