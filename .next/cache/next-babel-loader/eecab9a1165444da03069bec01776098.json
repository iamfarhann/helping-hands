{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Input/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputField, { EyeButton } from './input.style';\n\nconst Input = (_ref) => {\n  let {\n    label,\n    value,\n    onBlur,\n    onFocus,\n    onChange,\n    inputType,\n    isMaterial,\n    icon,\n    iconPosition,\n    passwordShowHide,\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"value\", \"onBlur\", \"onFocus\", \"onChange\", \"inputType\", \"isMaterial\", \"icon\", \"iconPosition\", \"passwordShowHide\", \"className\"]);\n\n  // use toggle hooks\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    toggle: false,\n    focus: false,\n    value: ''\n  }); // toggle function\n\n  const handleToggle = () => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      toggle: !state.toggle\n    }));\n  }; // add focus class\n\n\n  const handleOnFocus = event => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      focus: true\n    }));\n    onFocus(event);\n  }; // remove focus class\n\n\n  const handleOnBlur = event => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      focus: false\n    }));\n    onBlur(event);\n  }; // handle input value\n\n\n  const handleOnChange = event => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      value: event.target.value\n    }));\n    onChange(event.target.value);\n  }; // get input focus class\n\n\n  const getInputFocusClass = () => {\n    if (state.focus === true || state.value !== '') {\n      return 'is-focus';\n    } else {\n      return '';\n    }\n  }; // init variable\n\n\n  let inputElement, htmlFor; // Add all classs to an array\n\n  const addAllClasses = ['reusecore__input']; // Add is-material class\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // Add icon position class if input element has icon\n\n\n  if (icon && iconPosition) {\n    addAllClasses.push(`icon-${iconPosition}`);\n  } // Add new class\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // if lable is not empty\n\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // Label position\n\n\n  const LabelPosition = isMaterial === true ? 'bottom' : 'top'; // Label field\n\n  const LabelField = label && __jsx(\"label\", {\n    htmlFor: htmlFor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 31\n    }\n  }, label); // Input type check\n\n\n  switch (inputType) {\n    case 'textarea':\n      inputElement = __jsx(\"textarea\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }));\n      break;\n\n    case 'password':\n      inputElement = __jsx(\"div\", {\n        className: \"field-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, __jsx(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: state.toggle ? 'password' : 'text',\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      })), passwordShowHide && __jsx(EyeButton, {\n        onClick: handleToggle,\n        className: state.toggle ? 'eye' : 'eye-closed',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      })));\n      break;\n\n    default:\n      inputElement = __jsx(\"div\", {\n        className: \"field-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }\n      }, __jsx(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: inputType,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      })), icon && __jsx(\"span\", {\n        className: \"input-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 20\n        }\n      }, icon));\n  }\n\n  return __jsx(InputField, {\n    className: `${addAllClasses.join(' ')} ${getInputFocusClass()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, LabelPosition === 'top' && LabelField, inputElement, isMaterial && __jsx(\"span\", {\n    className: \"highlight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 22\n    }\n  }), LabelPosition === 'bottom' && LabelField);\n};\n/** Inout prop type checking. */\n\n\nInput.propTypes = {\n  /** className of the Input component. */\n  className: PropTypes.string,\n\n  /** Set input label value. */\n  label: PropTypes.string,\n\n  /** The input value, required for a controlled component. */\n  value: PropTypes.oneOf(['string', 'number']),\n\n  /** Make default input into material style input. */\n  isMaterial: PropTypes.bool,\n\n  /** Password show hide icon button prop [*only for password field]. */\n  passwordShowHide: PropTypes.bool,\n\n  /** Set input type of the input element. Default type is text. */\n  inputType: PropTypes.oneOf(['text', 'email', 'password', 'number', 'textarea']),\n\n  /** Add icon in input field. This prop will not work with password\n   * and textarea field.\n   */\n  icon: PropTypes.object,\n\n  /** Set input field icon position. Default position is 'left'. */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func\n};\n/** Inout default type. */\n\nInput.defaultProps = {\n  inputType: 'text',\n  isMaterial: false,\n  iconPosition: 'left',\n  onBlur: () => {},\n  onFocus: () => {},\n  onChange: () => {}\n};\nexport default Input;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Input/index.js"],"names":["React","useState","PropTypes","InputField","EyeButton","Input","label","value","onBlur","onFocus","onChange","inputType","isMaterial","icon","iconPosition","passwordShowHide","className","props","state","setState","toggle","focus","handleToggle","handleOnFocus","event","handleOnBlur","handleOnChange","target","getInputFocusClass","inputElement","htmlFor","addAllClasses","push","replace","toLowerCase","LabelPosition","LabelField","join","propTypes","string","oneOf","bool","object","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputField, { EyeButton } from './input.style';\nconst Input = ({\n  label,\n  value,\n  onBlur,\n  onFocus,\n  onChange,\n  inputType,\n  isMaterial,\n  icon,\n  iconPosition,\n  passwordShowHide,\n  className,\n  ...props\n}) => {\n  // use toggle hooks\n  const [state, setState] = useState({\n    toggle: false,\n    focus: false,\n    value: '',\n  });\n\n  // toggle function\n  const handleToggle = () => {\n    setState({\n      ...state,\n      toggle: !state.toggle,\n    });\n  };\n\n  // add focus class\n  const handleOnFocus = event => {\n    setState({\n      ...state,\n      focus: true,\n    });\n    onFocus(event);\n  };\n\n  // remove focus class\n  const handleOnBlur = event => {\n    setState({\n      ...state,\n      focus: false,\n    });\n    onBlur(event);\n  };\n\n  // handle input value\n  const handleOnChange = event => {\n    setState({\n      ...state,\n      value: event.target.value,\n    });\n    onChange(event.target.value);\n  };\n\n  // get input focus class\n  const getInputFocusClass = () => {\n    if (state.focus === true || state.value !== '') {\n      return 'is-focus';\n    } else {\n      return '';\n    }\n  };\n\n  // init variable\n  let inputElement, htmlFor;\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__input'];\n\n  // Add is-material class\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  // Add icon position class if input element has icon\n  if (icon && iconPosition) {\n    addAllClasses.push(`icon-${iconPosition}`);\n  }\n\n  // Add new class\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // if lable is not empty\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  }\n\n  // Label position\n  const LabelPosition = isMaterial === true ? 'bottom' : 'top';\n\n  // Label field\n  const LabelField = label && <label htmlFor={htmlFor}>{label}</label>;\n\n  // Input type check\n  switch (inputType) {\n    case 'textarea':\n      inputElement = (\n        <textarea\n          {...props}\n          id={htmlFor}\n          name={htmlFor}\n          value={state.value}\n          onChange={handleOnChange}\n          onBlur={handleOnBlur}\n          onFocus={handleOnFocus}\n        />\n      );\n      break;\n\n    case 'password':\n      inputElement = (\n        <div className=\"field-wrapper\">\n          <input\n            {...props}\n            id={htmlFor}\n            name={htmlFor}\n            type={state.toggle ? 'password' : 'text'}\n            value={state.value}\n            onChange={handleOnChange}\n            onBlur={handleOnBlur}\n            onFocus={handleOnFocus}\n          />\n          {passwordShowHide && (\n            <EyeButton\n              onClick={handleToggle}\n              className={state.toggle ? 'eye' : 'eye-closed'}\n            >\n              <span />\n            </EyeButton>\n          )}\n        </div>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <div className=\"field-wrapper\">\n          <input\n            {...props}\n            id={htmlFor}\n            name={htmlFor}\n            type={inputType}\n            value={state.value}\n            onChange={handleOnChange}\n            onBlur={handleOnBlur}\n            onFocus={handleOnFocus}\n          />\n          {icon && <span className=\"input-icon\">{icon}</span>}\n        </div>\n      );\n  }\n\n  return (\n    <InputField\n      className={`${addAllClasses.join(' ')} ${getInputFocusClass()}`}\n    >\n      {LabelPosition === 'top' && LabelField}\n      {inputElement}\n      {isMaterial && <span className=\"highlight\" />}\n      {LabelPosition === 'bottom' && LabelField}\n    </InputField>\n  );\n};\n\n/** Inout prop type checking. */\nInput.propTypes = {\n  /** className of the Input component. */\n  className: PropTypes.string,\n\n  /** Set input label value. */\n  label: PropTypes.string,\n\n  /** The input value, required for a controlled component. */\n  value: PropTypes.oneOf(['string', 'number']),\n\n  /** Make default input into material style input. */\n  isMaterial: PropTypes.bool,\n\n  /** Password show hide icon button prop [*only for password field]. */\n  passwordShowHide: PropTypes.bool,\n\n  /** Set input type of the input element. Default type is text. */\n  inputType: PropTypes.oneOf([\n    'text',\n    'email',\n    'password',\n    'number',\n    'textarea',\n  ]),\n\n  /** Add icon in input field. This prop will not work with password\n   * and textarea field.\n   */\n  icon: PropTypes.object,\n\n  /** Set input field icon position. Default position is 'left'. */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func,\n};\n\n/** Inout default type. */\nInput.defaultProps = {\n  inputType: 'text',\n  isMaterial: false,\n  iconPosition: 'left',\n  onBlur: () => {},\n  onFocus: () => {},\n  onChange: () => {},\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}