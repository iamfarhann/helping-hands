{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useReducer, useContext, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nvar UserStateContext = React.createContext();\nvar UserDispatchContext = React.createContext();\nexport var UserProvider = function UserProvider(_ref) {\n  var children = _ref.children;\n  var router = useRouter();\n\n  var reducer = function reducer(state, action) {\n    switch (action.type) {\n      case \"LOGIN\":\n        if (action.payload[\"id\"]) {\n          if (action.payload.user.role.name == \"Donor\") {\n            router.push(\"/account\");\n          } else {\n            router.push(\"/account_o\");\n          }\n        }\n\n        return action.payload;\n\n      case \"LOGOUT\":\n        return action.payload;\n\n      case \"UPDATE\":\n        return action.payload;\n\n      default:\n        throw new Error(\"Unknown action: \".concat(action.type));\n    }\n  };\n\n  var _useReducer = useReducer(reducer, 0),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; //  useEffect(()=>{\n  //   },[state])\n\n\n  return __jsx(UserDispatchContext.Provider, {\n    value: dispatch\n  }, __jsx(UserStateContext.Provider, {\n    value: state\n  }, children));\n};\nexport var useData = function useData() {\n  return useContext(UserStateContext);\n};\nexport var useDispatchUser = function useDispatchUser() {\n  return useContext(UserDispatchContext);\n};","map":null,"metadata":{},"sourceType":"module"}