{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Checkbox/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport useToggle from '../useToggle';\nimport CheckBoxStyle from './checkbox.style';\n\nconst CheckBox = (_ref) => {\n  let {\n    className,\n    isChecked,\n    labelText,\n    value,\n    id,\n    htmlFor,\n    labelPosition,\n    isMaterial,\n    disabled\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isChecked\", \"labelText\", \"value\", \"id\", \"htmlFor\", \"labelPosition\", \"isMaterial\", \"disabled\"]);\n\n  // use toggle hooks\n  const [toggleValue, toggleHandler] = useToggle(isChecked); // Add all classs to an array\n\n  const addAllClasses = ['reusecore__checkbox']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // label control\n\n\n  const LabelField = labelText && __jsx(\"span\", {\n    className: \"reusecore__field-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, labelText);\n\n  const position = labelPosition || 'right';\n  return __jsx(CheckBoxStyle, _extends({\n    className: addAllClasses.join(' ')\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }), __jsx(\"label\", {\n    htmlFor: htmlFor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, position === 'left' || position === 'right' ? LabelField : '', __jsx(\"input\", _extends({\n    type: \"checkbox\",\n    className: \"checkbox\",\n    id: id,\n    value: value,\n    checked: toggleValue,\n    onChange: toggleHandler,\n    disabled: disabled\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })));\n};\n\nCheckBox.propTypes = {\n  /** ClassName of the Checkbox */\n  className: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelText: PropTypes.string,\n\n  /**\n   * Note: id and htmlFor must be same.\n   */\n  htmlFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Set checkbox id in number || string */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** value of the checkbox field */\n  value: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelPosition: PropTypes.oneOf(['right', 'left']),\n\n  /** Checkbox toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** disabled of the checkbox field */\n  disabled: PropTypes.bool\n};\n/** Checkbox default proptype */\n\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false\n};\nexport default CheckBox;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Checkbox/index.js"],"names":["React","PropTypes","useToggle","CheckBoxStyle","CheckBox","className","isChecked","labelText","value","id","htmlFor","labelPosition","isMaterial","disabled","props","toggleValue","toggleHandler","addAllClasses","push","LabelField","position","join","propTypes","string","oneOfType","number","oneOf","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport useToggle from '../useToggle';\nimport CheckBoxStyle from './checkbox.style';\n\nconst CheckBox = ({\n  className,\n  isChecked,\n  labelText,\n  value,\n  id,\n  htmlFor,\n  labelPosition,\n  isMaterial,\n  disabled,\n  ...props\n}) => {\n  // use toggle hooks\n  const [toggleValue, toggleHandler] = useToggle(isChecked);\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__checkbox'];\n\n  // Add label position class\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  }\n\n  // isMaterial prop checking\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // label control\n  const LabelField = labelText && (\n    <span className=\"reusecore__field-label\">{labelText}</span>\n  );\n\n  const position = labelPosition || 'right';\n\n  return (\n    <CheckBoxStyle className={addAllClasses.join(' ')} {...props}>\n      <label htmlFor={htmlFor}>\n        {position === 'left' || position === 'right' ? LabelField : ''}\n        <input\n          type=\"checkbox\"\n          className=\"checkbox\"\n          id={id}\n          value={value}\n          checked={toggleValue}\n          onChange={toggleHandler}\n          disabled={disabled}\n          {...props}\n        />\n        <div />\n      </label>\n    </CheckBoxStyle>\n  );\n};\n\nCheckBox.propTypes = {\n  /** ClassName of the Checkbox */\n  className: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelText: PropTypes.string,\n\n  /**\n   * Note: id and htmlFor must be same.\n   */\n  htmlFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Set checkbox id in number || string */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** value of the checkbox field */\n  value: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelPosition: PropTypes.oneOf(['right', 'left']),\n\n  /** Checkbox toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** disabled of the checkbox field */\n  disabled: PropTypes.bool,\n};\n\n/** Checkbox default proptype */\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false,\n};\nexport default CheckBox;\n"]},"metadata":{},"sourceType":"module"}