{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Button/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonStyle from './button.style';\nimport Loader from '../Loader';\n\nconst Button = _ref => {\n  let {\n    type,\n    title,\n    icon,\n    disabled,\n    iconPosition,\n    onClick,\n    loader,\n    loaderColor,\n    isMaterial,\n    isLoading,\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"type\", \"title\", \"icon\", \"disabled\", \"iconPosition\", \"onClick\", \"loader\", \"loaderColor\", \"isMaterial\", \"isLoading\", \"className\"]); // Add all classs to an array\n\n\n  const addAllClasses = ['reusecore__button']; // isLoading prop checking\n\n  if (isLoading) {\n    addAllClasses.push('is-loading');\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Checking button loading state\n\n\n  const buttonIcon = isLoading !== false ? __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, loader ? loader : __jsx(Loader, {\n    loaderColor: loaderColor || '#30C56D',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 28\n    }\n  })) : icon && __jsx(\"span\", {\n    className: \"btn-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, icon); // set icon position\n\n  const position = iconPosition || 'right';\n  return __jsx(ButtonStyle, _extends({\n    type: type,\n    className: addAllClasses.join(' '),\n    icon: icon,\n    disabled: disabled,\n    \"icon-position\": position,\n    onClick: onClick\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), position === 'left' && buttonIcon, title && __jsx(\"span\", {\n    className: \"btn-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, title), position === 'right' && buttonIcon);\n};\n\nButton.propTypes = {\n  /** ClassName of the button */\n  className: PropTypes.string,\n\n  /** Add icon */\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n  /** Add icon */\n  icon: PropTypes.object,\n\n  /** Add loader */\n  loader: PropTypes.object,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** Button Loading state */\n  isLoading: PropTypes.bool,\n\n  /** Button Loading state */\n  loaderColor: PropTypes.string,\n\n  /** If true button will be disabled */\n  disabled: PropTypes.bool,\n\n  /** Adjust your icon and loader position [if you use loader] */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** Variant change button shape */\n  variant: PropTypes.oneOf(['textButton', 'outlined', 'fab', 'extendedFab']),\n\n  /** primary || secondary || warning || error  change text and border color.\n   *  And primaryWithBg || secondaryWithBg || warningWithBg || errorWithBg change text, border and background color */\n  colors: PropTypes.oneOf(['primary', 'secondary', 'warning', 'error', 'primaryWithBg', 'secondaryWithBg', 'warningWithBg', 'errorWithBg']),\n\n  /**\n   * Gets called when the user clicks on the button\n   */\n  onClick: PropTypes.func\n};\nButton.defaultProps = {\n  disabled: false,\n  isMaterial: false,\n  isLoading: false,\n  type: 'button'\n};\nexport default Button;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Button/index.js"],"names":["Button","className","props","addAllClasses","buttonIcon","loader","loaderColor","icon","position","iconPosition","onClick","title","PropTypes","type","isMaterial","isLoading","disabled","variant","colors","func"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonStyle from './button.style';\nimport Loader from '../Loader';\n\nconst Button = ({\n  type,\n  title,\n  icon,\n  disabled,\n  iconPosition,\n  onClick,\n  loader,\n  loaderColor,\n  isMaterial,\n  isLoading,\n  className,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__button'];\n\n  // isLoading prop checking\n  if (isLoading) {\n    addAllClasses.push('is-loading');\n  }\n\n  // isMaterial prop checking\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // Checking button loading state\n  const buttonIcon =\n    isLoading !== false ? (\n      <Fragment>\n        {loader ? loader : <Loader loaderColor={loaderColor || '#30C56D'} />}\n      </Fragment>\n    ) : (\n      icon && <span className=\"btn-icon\">{icon}</span>\n    );\n\n  // set icon position\n  const position = iconPosition || 'right';\n\n  return (\n    <ButtonStyle\n      type={type}\n      className={addAllClasses.join(' ')}\n      icon={icon}\n      disabled={disabled}\n      icon-position={position}\n      onClick={onClick}\n      {...props}\n    >\n      {position === 'left' && buttonIcon}\n      {title && <span className=\"btn-text\">{title}</span>}\n      {position === 'right' && buttonIcon}\n    </ButtonStyle>\n  );\n};\n\nButton.propTypes = {\n  /** ClassName of the button */\n  className: PropTypes.string,\n\n  /** Add icon */\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n  /** Add icon */\n  icon: PropTypes.object,\n\n  /** Add loader */\n  loader: PropTypes.object,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** Button Loading state */\n  isLoading: PropTypes.bool,\n\n  /** Button Loading state */\n  loaderColor: PropTypes.string,\n\n  /** If true button will be disabled */\n  disabled: PropTypes.bool,\n\n  /** Adjust your icon and loader position [if you use loader] */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** Variant change button shape */\n  variant: PropTypes.oneOf(['textButton', 'outlined', 'fab', 'extendedFab']),\n\n  /** primary || secondary || warning || error  change text and border color.\n   *  And primaryWithBg || secondaryWithBg || warningWithBg || errorWithBg change text, border and background color */\n  colors: PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'warning',\n    'error',\n    'primaryWithBg',\n    'secondaryWithBg',\n    'warningWithBg',\n    'errorWithBg',\n  ]),\n\n  /**\n   * Gets called when the user clicks on the button\n   */\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  disabled: false,\n  isMaterial: false,\n  isLoading: false,\n  type: 'button',\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}