{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/RadioGroup/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ComponentWrapper from './radioGroup.style';\n\nvar RadioGroup = function RadioGroup(_ref) {\n  _s2();\n\n  _s();\n\n  var className = _ref.className,\n      name = _ref.name,\n      value = _ref.value,\n      items = _ref.items,\n      onUpdate = _ref.onUpdate;\n\n  var _useState = useState({\n    value: value\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var onChange = function onChange(e) {\n    var currentValue = e.target.value;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      value: currentValue\n    }));\n    onUpdate(e.target.value);\n  };\n\n  var addAllClasses = ['radio_group'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(ComponentWrapper, {\n    className: addAllClasses.join(' '),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, items.map(function (item) {\n    return __jsx(\"label\", {\n      htmlFor: item.title.toLowerCase().split(' ').join('-'),\n      key: \"radio__group-id\".concat(item.id),\n      className: state.value === item.value ? 'active' : '',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, __jsx(\"input\", {\n      type: \"radio\",\n      id: item.title.toLowerCase().split(' ').join('-'),\n      name: name,\n      onChange: onChange,\n      value: item.value,\n      checked: state.value === item.value,\n      disabled: item.disabled,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }), item.title || item.text ? __jsx(\"div\", {\n      className: \"content\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }, item.title && item.title), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }\n    }, item.text && item.text)) : '');\n  }));\n};\n\n_s2(RadioGroup, \"IbhRxfyXhdbIVKTzLmXd1BC6B/k=\");\n\n_c2 = RadioGroup;\n\n_s(RadioGroup, \"QZizocMfKYrXX7yKM6NLO7Xfvyg=\");\n\n_c = RadioGroup;\nRadioGroup.propTypes = {\n  /** className of the RadioGroup. */\n  className: PropTypes.string,\n\n  /** title or value of the RadioGroup. */\n  title: PropTypes.string,\n\n  /** text or sub title for single radio component / element. */\n  text: PropTypes.string,\n\n  /** active item value of the RadioGroup. The prop should be a string but in camelCase. */\n  value: PropTypes.string,\n\n  /** RadioGroup data in array of object form. Each object item should has 3 properties id, title and text. */\n  items: PropTypes.array,\n\n  /** This prop contain active radio field value.*/\n  onUpdate: PropTypes.func\n};\n/** RadioGroup default type. */\n\nRadioGroup.defaultProps = {\n  onUpdate: function onUpdate() {}\n};\nexport default RadioGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadioGroup\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"RadioGroup\");","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/RadioGroup/index.js"],"names":["RadioGroup","className","name","value","items","onUpdate","state","setState","useState","onChange","currentValue","e","addAllClasses","item","PropTypes","title","text","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ComponentWrapper from './radioGroup.style';\n\nconst RadioGroup = ({ className, name, value, items, onUpdate }) => {\n  const [state, setState] = useState({ value: value });\n\n  const onChange = e => {\n    const currentValue = e.target.value;\n    setState({\n      ...state,\n      value: currentValue,\n    });\n    onUpdate(e.target.value);\n  };\n\n  const addAllClasses = ['radio_group'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <ComponentWrapper className={addAllClasses.join(' ')}>\n      {items.map(item => (\n        <label\n          htmlFor={item.title\n            .toLowerCase()\n            .split(' ')\n            .join('-')}\n          key={`radio__group-id${item.id}`}\n          className={state.value === item.value ? 'active' : ''}\n        >\n          <input\n            type=\"radio\"\n            id={item.title\n              .toLowerCase()\n              .split(' ')\n              .join('-')}\n            name={name}\n            onChange={onChange}\n            value={item.value}\n            checked={state.value === item.value}\n            disabled={item.disabled}\n          />\n          {item.title || item.text ? (\n            <div className=\"content\">\n              <h4>{item.title && item.title}</h4>\n              <p>{item.text && item.text}</p>\n            </div>\n          ) : (\n            ''\n          )}\n        </label>\n      ))}\n    </ComponentWrapper>\n  );\n};\n\nRadioGroup.propTypes = {\n  /** className of the RadioGroup. */\n  className: PropTypes.string,\n  /** title or value of the RadioGroup. */\n  title: PropTypes.string,\n  /** text or sub title for single radio component / element. */\n  text: PropTypes.string,\n  /** active item value of the RadioGroup. The prop should be a string but in camelCase. */\n  value: PropTypes.string,\n  /** RadioGroup data in array of object form. Each object item should has 3 properties id, title and text. */\n  items: PropTypes.array,\n  /** This prop contain active radio field value.*/\n  onUpdate: PropTypes.func,\n};\n\n/** RadioGroup default type. */\nRadioGroup.defaultProps = {\n  onUpdate: () => {},\n};\n\nexport default RadioGroup;\n"]},"metadata":{},"sourceType":"module"}