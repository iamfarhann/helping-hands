{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Drawer/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nconst Drawer = _ref => {\n  let {\n    className,\n    children,\n    closeButton,\n    closeButtonStyle,\n    drawerHandler,\n    toggleHandler,\n    open\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"closeButton\", \"closeButtonStyle\", \"drawerHandler\", \"toggleHandler\", \"open\"]); // Add all classs to an array\n\n\n  const addAllClasses = ['reusecore__drawer']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(RcDrawer, _extends({\n    open: open,\n    onClose: toggleHandler,\n    className: addAllClasses.join(' ')\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"reusecore-drawer__close\",\n    onClick: toggleHandler,\n    style: closeButtonStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, closeButton), children), __jsx(\"div\", {\n    className: \"reusecore-drawer__handler\",\n    style: {\n      display: 'inline-block'\n    },\n    onClick: toggleHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, drawerHandler));\n};\n\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  // drawerHandler: PropTypes.element.isRequired\n  drawerHandler: PropTypes.element\n};\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null\n};\nexport default Drawer;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Drawer/index.js"],"names":["Drawer","open","props","addAllClasses","display","className","PropTypes","closeButton","width","placement","drawerHandler","element","handler","level"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nconst Drawer = ({\n  className,\n  children,\n  closeButton,\n  closeButtonStyle,\n  drawerHandler,\n  toggleHandler,\n  open,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__drawer'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <Fragment>\n      <RcDrawer\n        open={open}\n        onClose={toggleHandler}\n        className={addAllClasses.join(' ')}\n        {...props}\n      >\n        <div\n          className=\"reusecore-drawer__close\"\n          onClick={toggleHandler}\n          style={closeButtonStyle}\n        >\n          {closeButton}\n        </div>\n        {children}\n      </RcDrawer>\n      <div\n        className=\"reusecore-drawer__handler\"\n        style={{ display: 'inline-block' }}\n        onClick={toggleHandler}\n      >\n        {drawerHandler}\n      </div>\n    </Fragment>\n  );\n};\n\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  // drawerHandler: PropTypes.element.isRequired\n  drawerHandler: PropTypes.element,\n};\n\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null,\n};\n\nexport default Drawer;\n"]},"metadata":{},"sourceType":"module"}