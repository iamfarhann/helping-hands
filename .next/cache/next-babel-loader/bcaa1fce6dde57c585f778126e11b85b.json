{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Fragment } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport Head from \"next/head\";\nimport Sticky from \"react-stickynode\";\nimport { ThemeProvider } from \"styled-components\";\nimport { charityTheme } from \"../common/src/theme/charity\";\nimport { ResetCSS } from \"../common/src/assets/css/style\";\nimport { DrawerProvider } from \"../common/src/contexts/DrawerContext\";\nimport Navbar from \"../containers/Charity/Navbar\";\nimport DrawerSection from \"../containers/Charity/DrawerSection\";\nimport Footer from \"../containers/Charity/Footer\";\nimport { GlobalStyle, CharityWrapper, ContentWrapper } from \"../containers/Charity/charity.style\";\nimport { Box, Container, Typography, Grid, Paper, Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Heading from \"../common/src/components/Heading\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport BusinessCenterIcon from \"@material-ui/icons/BusinessCenter\";\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { DropzoneArea } from \"material-ui-dropzone\";\nimport Text from \"../common/src/components/Text\";\nimport axios from \"axios\";\nimport { useData, useDispatchUser } from \"../lib/userData\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_UPDATE } from \"../lib/mutations\";\nimport Button from \"../common/src/components/Button\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nfunction ListItemLink(props) {\n  return __jsx(ListItem, _extends({\n    button: true,\n    component: \"a\"\n  }, props));\n}\n\nexport default (() => {\n  const classes = useStyles();\n  const {\n    query\n  } = useRouter();\n  const organization = useData();\n  const dispatch = useDispatchUser();\n  const {\n    0: createLoading,\n    1: setCreateLoading\n  } = useState(false);\n  const {\n    0: createError,\n    1: setCreateError\n  } = useState(\"\");\n  const [createUpdate] = useMutation(CREATE_UPDATE, {\n    onCompleted: data => {\n      console.log(data); // dispatch({\n      //   type: \"UPDATE\",\n      //   payload: data.updateOrganization.organization,\n      // });\n\n      setCreateError(\"Project Added succesfully!\");\n      setCreateLoading(false);\n      handleReset();\n    },\n    onError: error => {\n      console.log(error);\n      setCreateError(\"Sorry an error occurred. Please try again!\");\n    }\n  });\n  const {\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    handleReset,\n    values,\n    touched,\n    errors,\n    setFieldValue\n  } = useFormik({\n    initialValues: {\n      update: \"\",\n      images: []\n    },\n    onSubmit: values => {\n      console.log(\"On Submit\");\n      console.log(values, \"Query\", query.project);\n      setCreateLoading(true);\n      setCreateError(null);\n      createUpdate({\n        variables: {\n          field: {\n            data: {\n              images: values.images.length ? values.images : null,\n              update: values.update,\n              project: query.project\n            }\n          }\n        }\n      });\n    },\n    validationSchema: Yup.object().shape({\n      update: Yup.string().required(\"Please Enter Project Update!\"),\n      images: Yup.array()\n    })\n  });\n\n  const handlefiles = async (files, type) => {\n    console.log(files, type);\n\n    if (files.length) {\n      setCreateLoading(true);\n      const form = new FormData();\n      files.forEach(file => {\n        form.append(\"files\", file);\n      });\n\n      try {\n        await axios.post(\"http://localhost:1337/upload\", form, {\n          headers: {\n            \"Content-type\": \"multipart/form-data\"\n          }\n        }).then(res => {\n          console.log(res.data); //setFileIDs([...filedIds, ...res.data]);\n\n          if (type == \"images\") {\n            let images = [];\n            res.data.map(img => {\n              images.push(img.id);\n            });\n            setFieldValue(\"images\", images);\n          }\n\n          setCreateLoading(false);\n        });\n      } catch (error) {\n        console.log(error, \"error\");\n        setCreateError(\"Sorry an error occurred. Please try again!\");\n      }\n    } else {\n      setFieldValue(\"images\", []);\n    }\n  };\n\n  return __jsx(ThemeProvider, {\n    theme: charityTheme\n  }, __jsx(Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Update | Esaar\"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: \"React next landing page\"\n  }), __jsx(\"meta\", {\n    name: \"theme-color\",\n    content: \"#FCF22B\"\n  }), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1.0\"\n  }), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700,800&display=swap\",\n    rel: \"stylesheet\"\n  })), __jsx(ResetCSS, null), __jsx(GlobalStyle, null), __jsx(CharityWrapper, null, __jsx(Sticky, {\n    top: 0,\n    innerZ: 9999,\n    activeClass: \"sticky-nav-active\"\n  }, __jsx(Navbar, null)), __jsx(DrawerProvider, null, __jsx(DrawerSection, null)), __jsx(ContentWrapper, null, __jsx(Grid, {\n    container: true,\n    style: {\n      maxWidth: \"1170px\",\n      minHeight: \"100vh\",\n      paddingTop: \"140px\",\n      marginLeft: \"170px\"\n    }\n  }, __jsx(Grid, {\n    item: true,\n    md: 3\n  }, __jsx(Paper, {\n    style: {\n      height: \"90vh\"\n    }\n  }, __jsx(Container, {\n    style: {\n      padding: \"40px\"\n    }\n  }, __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(List, {\n    component: \"nav\",\n    \"aria-label\": \"main mailbox folders\"\n  }, __jsx(Link, {\n    href: \"/account_o\"\n  }, __jsx(ListItem, {\n    button: true\n  }, __jsx(ListItemIcon, null, __jsx(AccountCircleIcon, null)), __jsx(ListItemText, {\n    primary: \"Account\"\n  }))), __jsx(Divider, null), __jsx(Link, {\n    href: \"/addProject\"\n  }, __jsx(ListItem, {\n    button: true\n  }, __jsx(ListItemIcon, null, __jsx(BusinessCenterIcon, null)), __jsx(ListItemText, {\n    primary: \"Add Project \"\n  }))), __jsx(Divider, null), __jsx(Link, {\n    href: \"/pastProject\"\n  }, __jsx(ListItem, {\n    button: true\n  }, __jsx(ListItemIcon, null, __jsx(AssessmentIcon, null)), __jsx(ListItemText, {\n    primary: \"Projects\"\n  }))), __jsx(Divider, null), __jsx(ListItem, {\n    button: true,\n    onClick: handleLogout\n  }, __jsx(ListItemIcon, null, __jsx(PowerSettingsNewIcon, null)), __jsx(ListItemText, {\n    primary: \"Logout\"\n  }))))))), __jsx(Grid, {\n    item: true,\n    md: 8,\n    style: {\n      marginLeft: \"30px\"\n    }\n  }, __jsx(Paper, {\n    style: {\n      height: \"150vh\"\n    }\n  }, __jsx(Container, {\n    style: {\n      padding: \"40px\"\n    }\n  }, \" \", __jsx(Heading, {\n    content: \"Latest Update\",\n    color: \"#05B890\"\n  }), \" \", __jsx(Divider, null), __jsx(Grid, {\n    item: true,\n    md: 7,\n    style: {\n      marginTop: \"30px\"\n    }\n  }, __jsx(Heading, {\n    content: \"Update Details\",\n    as: \"h4\",\n    style: {\n      marginTop: \"1rem\"\n    }\n  }), \" \", __jsx(TextField, {\n    name: \"update\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.update && touched.update,\n    helperText: errors.update && touched.update ? errors.update : null,\n    label: \"\",\n    variant: \"outlined\",\n    size: \"large\",\n    multiline: true,\n    rows: 7,\n    style: {\n      color: \"#05B890\"\n    },\n    fullWidth: true\n  })), __jsx(Heading, {\n    content: \"Related Images\",\n    as: \"h4\",\n    style: {\n      marginTop: \"1rem\"\n    }\n  }), __jsx(DropzoneArea, {\n    acceptedFiles: [\"image/*\"],\n    dropzoneText: \"Drag and drop images here or click\",\n    onChange: files => handlefiles(files, \"images\")\n  })), __jsx(Grid, {\n    container: true,\n    item: true,\n    md: 12,\n    style: {\n      paddingLeft: \"40px\",\n      alignContent: \"center\"\n    }\n  }, createError ? __jsx(Text, {\n    style: {\n      color: \"orange\"\n    },\n    content: createError\n  }) : null), __jsx(Grid, {\n    container: true,\n    item: true,\n    md: 12,\n    style: {\n      alignContent: \"center\"\n    }\n  }, __jsx(Button, {\n    title: \"Send Update\",\n    variant: \"extendedFab\",\n    onClick: handleSubmit,\n    disabled: createLoading,\n    isLoading: createLoading,\n    style: {\n      marginTop: \"20px\",\n      marginLeft: \"260px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      minWidth: \"200px\",\n      height: \"auto\"\n    }\n  })))))), __jsx(Footer, null))));\n});","map":null,"metadata":{},"sourceType":"module"}