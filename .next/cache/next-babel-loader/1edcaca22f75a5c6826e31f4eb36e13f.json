{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/ScrollSpyMenu/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nconst ScrollSpyMenu = _ref => {\n  let {\n    className,\n    menuItems,\n    drawerClose\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"menuItems\", \"drawerClose\"]);\n\n  const {\n    dispatch\n  } = useContext(DrawerContext); // empty array for scrollspy items\n\n  const scrollItems = []; // convert menu path to scrollspy items\n\n  menuItems.forEach(item => {\n    scrollItems.push(item.path.slice(1));\n  }); // Add all classs to an array\n\n  const addAllClasses = ['scrollspy__menu']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Close drawer when click on menu item\n\n\n  const toggleDrawer = () => {\n    dispatch({\n      type: 'TOGGLE'\n    });\n  };\n\n  return __jsx(Scrollspy, _extends({\n    items: scrollItems,\n    className: addAllClasses.join(' '),\n    drawerClose: drawerClose\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }), menuItems.map((menu, index) => __jsx(\"li\", {\n    key: `menu-item-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, menu.staticLink ? __jsx(\"a\", {\n    href: menu.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, menu.label) : __jsx(React.Fragment, null, drawerClose ? __jsx(AnchorLink, {\n    href: menu.path,\n    offset: menu.offset,\n    onClick: toggleDrawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, menu.label) : __jsx(AnchorLink, {\n    href: menu.path,\n    offset: menu.offset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, menu.label)))));\n};\n\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\n   * data.\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\n   * Function to be executed when the active item has been updated [optional].\n   */\n  onUpdate: PropTypes.func\n};\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current'\n};\nexport default ScrollSpyMenu;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/ScrollSpyMenu/index.js"],"names":["ScrollSpyMenu","drawerClose","props","dispatch","useContext","scrollItems","menuItems","item","addAllClasses","toggleDrawer","type","index","menu","className","PropTypes","currentClassName","scrolledPastClassName","componentTag","style","offset","rootEl","onUpdate","func"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\n\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nconst ScrollSpyMenu = ({ className, menuItems, drawerClose, ...props }) => {\n  const { dispatch } = useContext(DrawerContext);\n  // empty array for scrollspy items\n  const scrollItems = [];\n\n  // convert menu path to scrollspy items\n  menuItems.forEach(item => {\n    scrollItems.push(item.path.slice(1));\n  });\n\n  // Add all classs to an array\n  const addAllClasses = ['scrollspy__menu'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // Close drawer when click on menu item\n  const toggleDrawer = () => {\n    dispatch({\n      type: 'TOGGLE',\n    });\n  };\n\n  return (\n    <Scrollspy\n      items={scrollItems}\n      className={addAllClasses.join(' ')}\n      drawerClose={drawerClose}\n      {...props}\n    >\n      {menuItems.map((menu, index) => (\n        <li key={`menu-item-${index}`}>\n          {menu.staticLink ? (\n            <a href={menu.path}>{menu.label}</a>\n          ) : (\n            <>\n              {drawerClose ? (\n                <AnchorLink\n                  href={menu.path}\n                  offset={menu.offset}\n                  onClick={toggleDrawer}\n                >\n                  {menu.label}\n                </AnchorLink>\n              ) : (\n                <AnchorLink href={menu.path} offset={menu.offset}>\n                  {menu.label}\n                </AnchorLink>\n              )}\n            </>\n          )}\n        </li>\n      ))}\n    </Scrollspy>\n  );\n};\n\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\n   * data.\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\n   * Function to be executed when the active item has been updated [optional].\n   */\n  onUpdate: PropTypes.func,\n};\n\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current',\n};\n\nexport default ScrollSpyMenu;\n"]},"metadata":{},"sourceType":"module"}