{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Fragment } from \"react\";\nimport { Modal } from \"@redq/reuse-modal\";\nimport \"@redq/reuse-modal/es/index.css\";\nexport default (({\n  Component,\n  pageProps\n}) => {\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(Modal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  })));\n}); // import React from 'react';\n// import App from 'next/app';\n// import Head from 'next/head';\n// import { Modal } from '@redq/reuse-modal';\n// import {\n//   createMuiTheme,\n//   ThemeProvider,\n//   StylesProvider,\n//   responsiveFontSizes\n// } from '@material-ui/core/styles';\n// import CssBaseline from '@material-ui/core/CssBaseline';\n// import withApollo from 'next-with-apollo';\n// // import ApolloClient, { InMemoryCache } from 'apollo-boost';\n// import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\n// import { ApolloProvider } from '@apollo/react-hooks';\n// import { getDataFromTree } from '@apollo/react-ssr';\n// import { setContext } from 'apollo-link-context';\n// import { ApolloLink } from 'apollo-link';\n// import { HttpLink } from 'apollo-link-http';\n// import { RestLink } from 'apollo-link-rest';\n// import Nodefetch from 'node-fetch';\n// import theme from '../theme';\n// import getToken from '../lib/getToken';\n// import { UserProvider } from '../lib/userData';\n// global.Headers = Nodefetch.Headers;\n// const restLink = new RestLink({\n//   uri: process.env.PLAIN_URL,\n//   credentials: 'same-origin'\n// });\n// const httpLink = new HttpLink({\n//   uri: process.env.SERVER_URL,\n//   credentials: 'same-origin'\n// });\n// const authLink = setContext((_, { headers }) => {\n//   const token = getToken();\n//   return {\n//     headers: {\n//       ...headers,\n//       accept: 'application/json',\n//       authorization: token ? `Bearer ${token}` : ''\n//     }\n//   };\n// });\n// class MyApp extends App {\n//   componentDidMount() {\n//     // Remove the server-side injected CSS.\n//     const jssStyles = document.querySelector('#jss-server-side');\n//     if (jssStyles) {\n//       jssStyles.parentElement.removeChild(jssStyles);\n//     }\n//   }\n//   render() {\n//     const { Component, pageProps, apollo, router } = this.props;\n//     return (\n//       <React.Fragment>\n//         {/* <Head>\n//           <title>Trilla App</title>\n//           <meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />\n//         </Head> */}\n//         <ThemeProvider theme={responsiveFontSizes(createMuiTheme(theme))}>\n//           {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n//           <CssBaseline />\n//           <ApolloProvider client={apollo}>\n//             <UserProvider>\n//               <Modal />\n//               <Component {...pageProps} />\n//             </UserProvider>\n//           </ApolloProvider>\n//         </ThemeProvider>\n//       </React.Fragment>\n//     );\n//   }\n// }\n// export default withApollo(\n//   ({ initialState }) =>\n//     new ApolloClient({\n//       link: ApolloLink.from([restLink, authLink, httpLink]),\n//       cache: new InMemoryCache().restore(initialState || {})\n//     }),\n//   { getDataFromTree }\n// )(MyApp);","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/pages/_app.js"],"names":["React","Fragment","Modal","Component","pageProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAO,gCAAP;AAEA,gBAAe,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA8B;AAC3C,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAMD,CAPD,E,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Modal } from \"@redq/reuse-modal\";\nimport \"@redq/reuse-modal/es/index.css\";\n\nexport default ({ Component, pageProps }) => {\n  return (\n    <Fragment>\n      <Modal />\n      <Component {...pageProps} />\n    </Fragment>\n  );\n};\n// import React from 'react';\n// import App from 'next/app';\n// import Head from 'next/head';\n// import { Modal } from '@redq/reuse-modal';\n// import {\n//   createMuiTheme,\n//   ThemeProvider,\n//   StylesProvider,\n//   responsiveFontSizes\n// } from '@material-ui/core/styles';\n// import CssBaseline from '@material-ui/core/CssBaseline';\n// import withApollo from 'next-with-apollo';\n// // import ApolloClient, { InMemoryCache } from 'apollo-boost';\n// import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\n// import { ApolloProvider } from '@apollo/react-hooks';\n// import { getDataFromTree } from '@apollo/react-ssr';\n// import { setContext } from 'apollo-link-context';\n// import { ApolloLink } from 'apollo-link';\n// import { HttpLink } from 'apollo-link-http';\n// import { RestLink } from 'apollo-link-rest';\n// import Nodefetch from 'node-fetch';\n// import theme from '../theme';\n// import getToken from '../lib/getToken';\n// import { UserProvider } from '../lib/userData';\n\n// global.Headers = Nodefetch.Headers;\n\n// const restLink = new RestLink({\n//   uri: process.env.PLAIN_URL,\n//   credentials: 'same-origin'\n// });\n\n// const httpLink = new HttpLink({\n//   uri: process.env.SERVER_URL,\n//   credentials: 'same-origin'\n// });\n\n// const authLink = setContext((_, { headers }) => {\n//   const token = getToken();\n//   return {\n//     headers: {\n//       ...headers,\n//       accept: 'application/json',\n//       authorization: token ? `Bearer ${token}` : ''\n//     }\n//   };\n// });\n\n// class MyApp extends App {\n//   componentDidMount() {\n//     // Remove the server-side injected CSS.\n//     const jssStyles = document.querySelector('#jss-server-side');\n//     if (jssStyles) {\n//       jssStyles.parentElement.removeChild(jssStyles);\n//     }\n//   }\n\n//   render() {\n//     const { Component, pageProps, apollo, router } = this.props;\n\n//     return (\n//       <React.Fragment>\n//         {/* <Head>\n//           <title>Trilla App</title>\n//           <meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />\n//         </Head> */}\n\n//         <ThemeProvider theme={responsiveFontSizes(createMuiTheme(theme))}>\n//           {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n//           <CssBaseline />\n//           <ApolloProvider client={apollo}>\n//             <UserProvider>\n//               <Modal />\n//               <Component {...pageProps} />\n//             </UserProvider>\n//           </ApolloProvider>\n//         </ThemeProvider>\n//       </React.Fragment>\n//     );\n//   }\n// }\n\n// export default withApollo(\n//   ({ initialState }) =>\n//     new ApolloClient({\n//       link: ApolloLink.from([restLink, authLink, httpLink]),\n//       cache: new InMemoryCache().restore(initialState || {})\n//     }),\n//   { getDataFromTree }\n// )(MyApp);\n"]},"metadata":{},"sourceType":"module"}