{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Checkbox/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport useToggle from '../useToggle';\nimport CheckBoxStyle from './checkbox.style';\n\nvar CheckBox = function CheckBox(_ref) {\n  _s2();\n\n  _s();\n\n  var className = _ref.className,\n      isChecked = _ref.isChecked,\n      labelText = _ref.labelText,\n      value = _ref.value,\n      id = _ref.id,\n      htmlFor = _ref.htmlFor,\n      labelPosition = _ref.labelPosition,\n      isMaterial = _ref.isMaterial,\n      disabled = _ref.disabled,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isChecked\", \"labelText\", \"value\", \"id\", \"htmlFor\", \"labelPosition\", \"isMaterial\", \"disabled\"]); // use toggle hooks\n\n\n  var _useToggle = useToggle(isChecked),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      toggleValue = _useToggle2[0],\n      toggleHandler = _useToggle2[1]; // Add all classs to an array\n\n\n  var addAllClasses = ['reusecore__checkbox']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(\"label_\".concat(labelPosition));\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // label control\n\n\n  var LabelField = labelText && __jsx(\"span\", {\n    className: \"reusecore__field-label\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, labelText);\n\n  var position = labelPosition || 'right';\n  return __jsx(CheckBoxStyle, _extends({\n    className: addAllClasses.join(' ')\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }), __jsx(\"label\", {\n    htmlFor: htmlFor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, position === 'left' || position === 'right' ? LabelField : '', __jsx(\"input\", _extends({\n    type: \"checkbox\",\n    className: \"checkbox\",\n    id: id,\n    value: value,\n    checked: toggleValue,\n    onChange: toggleHandler,\n    disabled: disabled\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s2(CheckBox, \"z6PuMksiRKSzwMKCqjjWAtiYDYk=\", false, function () {\n  return [useToggle];\n});\n\n_c2 = CheckBox;\n\n_s(CheckBox, \"aePPWv9yv2AAvFwtgP50FFMVdq4=\", false, function () {\n  return [useToggle];\n});\n\n_c = CheckBox;\nCheckBox.propTypes = {\n  /** ClassName of the Checkbox */\n  className: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelText: PropTypes.string,\n\n  /**\n   * Note: id and htmlFor must be same.\n   */\n  htmlFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Set checkbox id in number || string */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** value of the checkbox field */\n  value: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelPosition: PropTypes.oneOf(['right', 'left']),\n\n  /** Checkbox toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** disabled of the checkbox field */\n  disabled: PropTypes.bool\n};\n/** Checkbox default proptype */\n\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false\n};\nexport default CheckBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckBox\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"CheckBox\");","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/Checkbox/index.js"],"names":["CheckBox","className","isChecked","labelText","value","id","htmlFor","labelPosition","isMaterial","disabled","props","toggleValue","toggleHandler","useToggle","addAllClasses","LabelField","position","PropTypes","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport useToggle from '../useToggle';\nimport CheckBoxStyle from './checkbox.style';\n\nconst CheckBox = ({\n  className,\n  isChecked,\n  labelText,\n  value,\n  id,\n  htmlFor,\n  labelPosition,\n  isMaterial,\n  disabled,\n  ...props\n}) => {\n  // use toggle hooks\n  const [toggleValue, toggleHandler] = useToggle(isChecked);\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__checkbox'];\n\n  // Add label position class\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  }\n\n  // isMaterial prop checking\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // label control\n  const LabelField = labelText && (\n    <span className=\"reusecore__field-label\">{labelText}</span>\n  );\n\n  const position = labelPosition || 'right';\n\n  return (\n    <CheckBoxStyle className={addAllClasses.join(' ')} {...props}>\n      <label htmlFor={htmlFor}>\n        {position === 'left' || position === 'right' ? LabelField : ''}\n        <input\n          type=\"checkbox\"\n          className=\"checkbox\"\n          id={id}\n          value={value}\n          checked={toggleValue}\n          onChange={toggleHandler}\n          disabled={disabled}\n          {...props}\n        />\n        <div />\n      </label>\n    </CheckBoxStyle>\n  );\n};\n\nCheckBox.propTypes = {\n  /** ClassName of the Checkbox */\n  className: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelText: PropTypes.string,\n\n  /**\n   * Note: id and htmlFor must be same.\n   */\n  htmlFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Set checkbox id in number || string */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** value of the checkbox field */\n  value: PropTypes.string,\n\n  /** labelText of the checkbox field */\n  labelPosition: PropTypes.oneOf(['right', 'left']),\n\n  /** Checkbox toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** disabled of the checkbox field */\n  disabled: PropTypes.bool,\n};\n\n/** Checkbox default proptype */\nCheckBox.defaultProps = {\n  isChecked: false,\n  labelText: 'Checkbox label',\n  labelPosition: 'right',\n  disabled: false,\n};\nexport default CheckBox;\n"]},"metadata":{},"sourceType":"module"}