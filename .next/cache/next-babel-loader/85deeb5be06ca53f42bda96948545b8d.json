{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import React, { Fragment } from \"react\";\n// import { Modal } from \"@redq/reuse-modal\";\n// import \"@redq/reuse-modal/es/index.css\";\n// export default ({ Component, pageProps }) => {\n//   return (\n//     <Fragment>\n//       <Modal />\n//       <Component {...pageProps} />\n//     </Fragment>\n//   );\n// };\nimport React from \"react\";\nimport App from \"next/app\";\nimport Head from \"next/head\";\nimport { Modal } from \"@redq/reuse-modal\";\nimport { createMuiTheme, ThemeProvider, StylesProvider, responsiveFontSizes } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport withApollo from \"next-with-apollo\"; // import ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getDataFromTree } from \"@apollo/react-ssr\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloLink } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { RestLink } from \"apollo-link-rest\";\nimport Nodefetch from \"node-fetch\";\nimport theme from \"../theme\";\nimport getToken from \"../lib/getToken\";\nimport { UserProvider } from \"../lib/userData\";\nimport CookieChecker from \"../lib/cookieChecker\";\nglobal.Headers = Nodefetch.Headers;\nconst restLink = new RestLink({\n  uri: process.env.PLAIN_URL,\n  credentials: \"same-origin\"\n});\nconst httpLink = new HttpLink({\n  uri: process.env.SERVER_URL,\n  credentials: \"same-origin\"\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = getToken();\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      accept: \"application/json\",\n      authorization: token ? `Bearer ${token}` : \"\"\n    })\n  };\n});\n\nclass MyApp extends App {\n  componentDidMount() {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector(\"#jss-server-side\");\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      apollo,\n      router\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(ThemeProvider, {\n      theme: theme\n    }, __jsx(ApolloProvider, {\n      client: apollo\n    }, __jsx(UserProvider, null, __jsx(CookieChecker, null), __jsx(Modal, null), __jsx(Component, pageProps)))));\n  }\n\n}\n\nexport default withApollo(({\n  initialState\n}) => new ApolloClient({\n  link: ApolloLink.from([restLink, authLink, httpLink]),\n  cache: new InMemoryCache().restore(initialState || {})\n}), {\n  getDataFromTree\n})(MyApp);","map":null,"metadata":{},"sourceType":"module"}