{"ast":null,"code":"var _jsxFileName = \"/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/ScrollSpyMenu/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nconst ScrollSpyMenu = (_ref) => {\n  let {\n    className,\n    menuItems,\n    drawerClose\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"menuItems\", \"drawerClose\"]);\n\n  const {\n    dispatch\n  } = useContext(DrawerContext); // empty array for scrollspy items\n\n  const scrollItems = []; // convert menu path to scrollspy items\n\n  menuItems.forEach(item => {\n    scrollItems.push(item.path.slice(1));\n  }); // Add all classs to an array\n\n  const addAllClasses = ['scrollspy__menu']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Close drawer when click on menu item\n\n\n  const toggleDrawer = () => {\n    dispatch({\n      type: 'TOGGLE'\n    });\n  };\n\n  return __jsx(Scrollspy, _extends({\n    items: scrollItems,\n    className: addAllClasses.join(' '),\n    drawerClose: drawerClose\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }), menuItems.map((menu, index) => __jsx(\"li\", {\n    key: `menu-item-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, menu.staticLink ? __jsx(\"a\", {\n    href: menu.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, menu.label) : __jsx(React.Fragment, null, drawerClose ? __jsx(AnchorLink, {\n    href: menu.path,\n    offset: menu.offset,\n    onClick: toggleDrawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, menu.label) : __jsx(AnchorLink, {\n    href: menu.path,\n    offset: menu.offset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, menu.label)))));\n};\n\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\n   * data.\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\n   * Function to be executed when the active item has been updated [optional].\n   */\n  onUpdate: PropTypes.func\n};\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current'\n};\nexport default ScrollSpyMenu;","map":{"version":3,"sources":["/Users/mahad/Local Disk/untitled folder/helping-hands/common/src/components/ScrollSpyMenu/index.js"],"names":["React","useContext","PropTypes","Scrollspy","AnchorLink","DrawerContext","ScrollSpyMenu","className","menuItems","drawerClose","props","dispatch","scrollItems","forEach","item","push","path","slice","addAllClasses","toggleDrawer","type","join","map","menu","index","staticLink","label","offset","propTypes","string","array","isRequired","currentClassName","scrolledPastClassName","componentTag","style","object","number","rootEl","onUpdate","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\n\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nconst ScrollSpyMenu = ({ className, menuItems, drawerClose, ...props }) => {\n  const { dispatch } = useContext(DrawerContext);\n  // empty array for scrollspy items\n  const scrollItems = [];\n\n  // convert menu path to scrollspy items\n  menuItems.forEach(item => {\n    scrollItems.push(item.path.slice(1));\n  });\n\n  // Add all classs to an array\n  const addAllClasses = ['scrollspy__menu'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // Close drawer when click on menu item\n  const toggleDrawer = () => {\n    dispatch({\n      type: 'TOGGLE',\n    });\n  };\n\n  return (\n    <Scrollspy\n      items={scrollItems}\n      className={addAllClasses.join(' ')}\n      drawerClose={drawerClose}\n      {...props}\n    >\n      {menuItems.map((menu, index) => (\n        <li key={`menu-item-${index}`}>\n          {menu.staticLink ? (\n            <a href={menu.path}>{menu.label}</a>\n          ) : (\n            <>\n              {drawerClose ? (\n                <AnchorLink\n                  href={menu.path}\n                  offset={menu.offset}\n                  onClick={toggleDrawer}\n                >\n                  {menu.label}\n                </AnchorLink>\n              ) : (\n                <AnchorLink href={menu.path} offset={menu.offset}>\n                  {menu.label}\n                </AnchorLink>\n              )}\n            </>\n          )}\n        </li>\n      ))}\n    </Scrollspy>\n  );\n};\n\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\n   * data.\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\n   * Function to be executed when the active item has been updated [optional].\n   */\n  onUpdate: PropTypes.func,\n};\n\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current',\n};\n\nexport default ScrollSpyMenu;\n"]},"metadata":{},"sourceType":"module"}