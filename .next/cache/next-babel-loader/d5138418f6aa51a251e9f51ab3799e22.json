{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport Image from \"../common/src/components/Image\";\nvar heartImage = \"/image/charity/heart-alt.svg\";\nimport Head from \"next/head\";\nimport Sticky from \"react-stickynode\";\nimport { ThemeProvider } from \"styled-components\";\nimport { charityTheme } from \"../common/src/theme/charity\";\nimport { ResetCSS } from \"../common/src/assets/css/style\";\nimport { DrawerProvider } from \"../common/src/contexts/DrawerContext\";\nimport Navbar from \"../containers/Charity/Navbar\";\nimport DrawerSection from \"../containers/Charity/DrawerSection\";\nimport Footer from \"../containers/Charity/Footer\";\nimport { GlobalStyle, CharityWrapper, ContentWrapper } from \"../containers/Charity/charity.style\";\nimport { Box, Container, Typography, Grid, Paper, Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport DraftsIcon from \"@material-ui/icons/Drafts\";\nimport Button from \"../common/src/components/Button\";\nimport Heading from \"../common/src/components/Heading\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport BusinessCenterIcon from \"@material-ui/icons/BusinessCenter\";\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\nimport TextField from \"@material-ui/core/TextField\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport PasswordField from \"material-ui-password-field\";\nimport Text from \"../common/src/components/Text\";\nimport OrganizationList from \"../common/src/components/HelpingHands/OrganizationList\";\nimport InputGroup from \"../common/src/components/InputGroup\";\nimport RadioGroup from \"../common/src/components/RadioGroup\";\nimport SectionWrapper, { ContentArea, ButtonGroup, DonationForm, DonateButton } from \"../containers/Charity/donateSection/donateSection.style\";\nimport { paymentPolicy, currencyOptions } from \"../common/src/data/Charity\";\nimport { useData, useDispatchUser } from \"../lib/userData\";\nimport { GET_ORGANIZATION_NAMES } from \"../lib/queries\";\nimport { CREATE_PORTFOLIO, UPDATE_PORTFOLIO } from \"../lib/mutations\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport moment from \"moment\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: \"100%\",\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper\n    }\n  };\n});\n\nfunction ListItemLink(props) {\n  return __jsx(ListItem, _extends({\n    button: true,\n    component: \"a\"\n  }, props));\n}\n\nexport default (function () {\n  var classes = useStyles();\n  var paymentPolicy = [{\n    id: 1,\n    title: \"One Time\",\n    value: \"once\",\n    text: \"One Time donation given\"\n  }, {\n    id: 2,\n    title: \"Ongoing\",\n    value: \"monthly\",\n    text: \"Everymonth donation given\"\n  }];\n  var dispatch = useDispatchUser();\n\n  var _useState = useState(false),\n      createLoading = _useState[0],\n      setCreateLoading = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      createError = _useState2[0],\n      setCreateError = _useState2[1];\n\n  var _useState3 = useState(false),\n      portfolio = _useState3[0],\n      setPortfolio = _useState3[1];\n\n  var _useState4 = useState(false),\n      refetchNow = _useState4[0],\n      setRefetchNow = _useState4[1];\n\n  var donor = useData();\n\n  var handleFormData = function handleFormData(value, name) {\n    setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, name, value)));\n  };\n\n  var handleDonation = function handleDonation(e) {\n    e.preventDefault();\n    console.log(\"Donation form data: \", state);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      price: \"\"\n    }));\n  };\n\n  var _useQuery = useQuery(GET_ORGANIZATION_NAMES),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch;\n\n  var _useMutation = useMutation(CREATE_PORTFOLIO, {\n    onCompleted: function onCompleted(data) {\n      console.log(data, \"Portfolio Completed\");\n      setPortfolio(false);\n      dispatch({\n        type: \"UPDATE\",\n        payload: _objectSpread(_objectSpread({}, donor), {}, {\n          portfolios: donor.portfolios.concat(data.createPortfolio.portfolio),\n          creditAmount: donor.creditAmount - data.updatePortfolio.portfolio.paymentSize\n        })\n      });\n      setRefetchNow(true);\n      setCreateError(\"Added to portfolio succesfully!\");\n      setCreateLoading(false);\n      handleReset();\n    },\n    onError: function onError(error) {\n      console.log(error);\n      setCreateError(\"Sorry an error occurred. Please try again!\");\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createPortfolio = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_PORTFOLIO, {\n    onCompleted: function onCompleted(data) {\n      console.log(data, \"Portfolio UPDATED\");\n      setPortfolio(false);\n      dispatch({\n        type: \"UPDATE\",\n        payload: _objectSpread(_objectSpread({}, donor), {}, {\n          portfolios: donor.portfolios.concat(data.updatePortfolio.portfolio),\n          creditAmount: donor.creditAmount - data.updatePortfolio.portfolio.paymentSize\n        })\n      });\n      setRefetchNow(true);\n      setCreateError(\"Portfolio updated succesfully!\");\n      setCreateLoading(false);\n      handleReset();\n    },\n    onError: function onError(error) {\n      console.log(error);\n      setCreateError(\"Sorry an error occurred. Please try again!\");\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updatePortfolio = _useMutation4[0];\n\n  var schemas = [{\n    paymentSize: Yup.number().min(10, \"Please enter a value greater than Rs. 10\").required(\"Please enter a valid donation size.\"),\n    organization: Yup.string(),\n    period: Yup.string().required(\"Please enter the period.\")\n  }];\n\n  var _useFormik = useFormik({\n    initialValues: {\n      paymentSize: 10,\n      period: \"once\",\n      organization: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      setCreateLoading(true);\n      setCreateError(null);\n\n      if (donor.creditAmount >= values.paymentSize) {\n        if (donor.portfolios.filter(function (portfolio) {\n          return portfolio.organization.organizationName == values.organization;\n        }).length) {\n          console.log(\"if block\");\n          updatePortfolio({\n            variables: {\n              field: {\n                data: {\n                  paymentSize: parseInt(values.paymentSize),\n                  period: values.period,\n                  paymentDate: moment().format(\"YYYY-MM-DD\")\n                },\n                where: {\n                  id: donor.portfolios.filter(function (portfolio) {\n                    return portfolio.organization.organizationName == values.organization;\n                  })[0].id\n                }\n              }\n            }\n          });\n        } else {\n          createPortfolio({\n            variables: {\n              field: {\n                data: {\n                  paymentSize: parseInt(values.paymentSize),\n                  period: values.period,\n                  donor: donor ? donor.id : null,\n                  organization: data.organizations.filter(function (organization) {\n                    return organization.organizationName == values.organization;\n                  })[0].id,\n                  paymentDate: moment().format(\"YYYY-MM-DD\")\n                }\n              }\n            }\n          });\n        }\n      } else {\n        setCreateLoading(false);\n        setCreateError(\"Insufficent balance. Please refill your account & then add to portfolio\");\n      }\n    },\n    validationSchema: Yup.object().shape(schemas[0])\n  }),\n      handleBlur = _useFormik.handleBlur,\n      handleChange = _useFormik.handleChange,\n      handleSubmit = _useFormik.handleSubmit,\n      handleReset = _useFormik.handleReset,\n      values = _useFormik.values,\n      touched = _useFormik.touched,\n      errors = _useFormik.errors,\n      setFieldValue = _useFormik.setFieldValue;\n\n  useEffect(function () {\n    if (data) {\n      setFieldValue(\"organization\", data.organizations[0].organizationName);\n    }\n  }, [data]);\n  return __jsx(ThemeProvider, {\n    theme: charityTheme\n  }, __jsx(Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Account | Esaar\"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: \"React next landing page\"\n  }), __jsx(\"meta\", {\n    name: \"theme-color\",\n    content: \"#FCF22B\"\n  }), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1.0\"\n  }), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700,800&display=swap\",\n    rel: \"stylesheet\"\n  })), __jsx(ResetCSS, null), __jsx(GlobalStyle, null), __jsx(CharityWrapper, null, __jsx(Sticky, {\n    top: 0,\n    innerZ: 9999,\n    activeClass: \"sticky-nav-active\"\n  }, __jsx(Navbar, null)), __jsx(DrawerProvider, null, __jsx(DrawerSection, null)), __jsx(ContentWrapper, null, __jsx(Grid, {\n    container: true,\n    style: {\n      maxWidth: \"1170px\",\n      minHeight: \"100vh\",\n      paddingTop: \"140px\",\n      marginLeft: \"170px\"\n    }\n  }, __jsx(Grid, {\n    item: true,\n    md: 3\n  }, __jsx(Paper, {\n    style: {\n      height: \"90vh\"\n    }\n  }, __jsx(Container, {\n    style: {\n      padding: \"40px\"\n    }\n  }, __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(List, {\n    component: \"nav\",\n    \"aria-label\": \"main mailbox folders\"\n  }, __jsx(Link, {\n    href: \"/account\"\n  }, __jsx(ListItem, {\n    button: true\n  }, __jsx(ListItemIcon, null, __jsx(AccountCircleIcon, null)), __jsx(ListItemText, {\n    primary: \"My Profile\"\n  }))), __jsx(Divider, null), __jsx(ListItem, {\n    button: true,\n    component: \"a\",\n    href: \"/portfolio\"\n  }, __jsx(ListItemIcon, null, __jsx(BusinessCenterIcon, null)), __jsx(ListItemText, {\n    primary: \"Portfolio \"\n  })), __jsx(Divider, null), __jsx(ListItem, {\n    button: true,\n    component: \"a\",\n    href: \"/pastProject\"\n  }, __jsx(ListItemIcon, null, __jsx(AssessmentIcon, null)), __jsx(ListItemText, {\n    primary: \"Past Projects\"\n  })), __jsx(Divider, null), __jsx(ListItem, {\n    button: true\n  }, __jsx(ListItemIcon, null, __jsx(PowerSettingsNewIcon, null)), __jsx(ListItemText, {\n    primary: \"Logout\"\n  }))))))), __jsx(Grid, {\n    item: true,\n    md: 8,\n    style: {\n      marginLeft: \"30px\"\n    }\n  }, __jsx(Paper, {\n    style: {\n      height: \"125vh\"\n    }\n  }, __jsx(Container, {\n    style: {\n      padding: \"40px\"\n    }\n  }, \" \", __jsx(Heading, {\n    content: \"Portfolio\",\n    color: \"#05B890\"\n  }), \" \", __jsx(Divider, null), __jsx(DonationForm, {\n    onSubmit: function onSubmit(e) {\n      return handleDonation(e);\n    },\n    style: {\n      width: \"550px\",\n      marginLeft: \"50px\"\n    }\n  }, __jsx(InputGroup, {\n    inputType: \"number\",\n    placeholder: \"0\",\n    inputValue: values.paymentSize,\n    inputOnChange: function inputOnChange(e) {\n      return setFieldValue(\"paymentSize\", e.target.value);\n    },\n    currency: data ? data.organizations[0].organizationName : \"\",\n    selectedValue: values.organization,\n    selectOptions: data ? data.organizations.map(function (organization) {\n      return {\n        id: organization.id,\n        title: organization.organizationName,\n        value: organization.organizationName\n      };\n    }) : [],\n    selectOnUpdate: function selectOnUpdate(value) {\n      console.log(\"value:\", value);\n      setFieldValue(\"organization\", value);\n    }\n  }), errors.paymentSize ? __jsx(Box, {\n    width: \"100%\",\n    p: 2\n  }, __jsx(Text, {\n    content: errors.paymentSize\n  })) : null, __jsx(RadioGroup, {\n    name: \"period\",\n    value: paymentPolicy.id,\n    items: paymentPolicy,\n    onUpdate: function onUpdate(value) {\n      return setFieldValue(\"period\", value);\n    }\n  }), createError ? __jsx(Box, {\n    width: \"100%\",\n    p: 2\n  }, __jsx(Text, {\n    style: {\n      color: \"orange\"\n    },\n    content: createError\n  })) : null, __jsx(DonateButton, {\n    type: \"submit\",\n    onClick: handleSubmit\n  }, \"Add to protfolio\", createLoading ? __jsx(CircularProgress, {\n    style: {\n      marginLeft: \"10px\",\n      color: \"#FFFFFF\"\n    },\n    size: 20\n  }) : __jsx(Image, {\n    src: heartImage,\n    alt: \"Charity Landing\"\n  }))), __jsx(Heading, {\n    content: \"My Organizations\",\n    color: \"#05B890\"\n  }), \" \", __jsx(Divider, null), __jsx(OrganizationList, {\n    refetchNow: refetchNow,\n    setRefetchNow: setRefetchNow\n  })))))), __jsx(Footer, null))));\n});","map":null,"metadata":{},"sourceType":"module"}