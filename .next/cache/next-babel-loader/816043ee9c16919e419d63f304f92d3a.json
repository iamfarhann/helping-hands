{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport Link from \"next/link\"; // import Typography from '@material-ui/core/Typography';\n// import Box from '@material-ui/core/Box';\n\nimport { Box, Container, Typography, Grid, Paper, Divider } from \"@material-ui/core\";\nimport HouseIcon from \"@material-ui/icons/House\";\nimport { borders } from \"@material-ui/system\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ProjectCard from \"../../common/src/components/HelpingHands/ProjectCard\";\nimport Category from \"../../common/src/components/HelpingHands/Category\";\nimport RankingCard from \"../../common/src/components/HelpingHands/RankingCard\";\nimport FancySlider from \"../../common/src/components/HelpingHands/fancySlider\";\nimport LinearSlider from \"../../common/src/components/HelpingHands/LinearSlider\";\nimport ScrollableTabsButtonForce from \"../../common/src/components/HelpingHands/Tabs\";\nimport Navbar from \"../../containers/Charity/Navbar\";\nimport { GlobalStyle, CharityWrapper, ContentWrapper } from \"../../containers/Charity/charity.style\";\nimport Sticky from \"react-stickynode\";\nimport { ThemeProvider } from \"styled-components\";\nimport Head from \"next/head\";\nimport { ResetCSS } from \"../../common/src/assets/css/style\";\nimport { charityTheme } from \"../../common/src/theme/charity\";\nimport Text from \"../../common/src/components/Text\";\nimport Heading from \"../../common/src/components/Heading\";\nimport DrawerSection from \"../../containers/Charity/DrawerSection\";\nimport { DrawerProvider } from \"../../common/src/contexts/DrawerContext\";\nimport Footer from \"../../containers/Charity/Footer\";\nimport Button from \"../../common/src/components/Button\";\nimport SectionWrapper, { SectionHeader, ContentArea, ImageWrapper, TextWrapper, TextAndLink, DonationProgressbar, BarArea, CurrentStatus, ShareArea, DonateButton, ShareList, Item } from \"../../containers/Charity/FundraiserSection/fundraiserSection.style\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useRouter } from \"next/router\";\nimport { useData, useDispatchUser } from \"../../lib/userData\";\nimport { ORGANIZATION_INFO } from \"../../lib/queries\";\nimport { CREATE_PORTFOLIO } from \"../../lib/mutations\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport Error from \"../../containers/Error\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport RadioGroup from \"../../common/src/components/RadioGroup\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport moment from \"moment\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary\n    },\n    testGrid: {\n      backgroundColor: \"orange\"\n    }\n  };\n});\n\nfunction Organization(_ref) {\n  var organizationID = _ref.organizationID;\n  var classes = useStyles();\n  var router = useRouter();\n\n  var _useState = useState(false),\n      portfolio = _useState[0],\n      setPortfolio = _useState[1];\n\n  var _useState2 = useState(false),\n      createLoading = _useState2[0],\n      setCreateLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      createError = _useState3[0],\n      setCreateError = _useState3[1];\n\n  var donor = useData();\n  var dispatch = useDispatchUser();\n\n  var _useQuery = useQuery(ORGANIZATION_INFO, {\n    variables: {\n      fields: {\n        id: organizationID\n      }\n    },\n    skip: !organizationID,\n    fetchPolicy: \"network-only\"\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch;\n\n  var paymentPolicy = [{\n    id: 1,\n    title: \"One Time\",\n    value: \"once\",\n    text: \"One Time donation given\"\n  }, {\n    id: 2,\n    title: \"Ongoing\",\n    value: \"monthly\",\n    text: \"Everymonth donation given\"\n  }];\n  useEffect(function () {\n    console.log(data);\n  }, [data]);\n\n  var handlePortfolio = function handlePortfolio() {\n    console.log(\"handle portfolio\");\n\n    if (donor[\"id\"]) {\n      setPortfolio(true);\n    } else router.push(\"/signin\");\n  };\n\n  var _useMutation = useMutation(CREATE_PORTFOLIO, {\n    onCompleted: function onCompleted(data) {\n      console.log(data, \"Portfolio Completed\");\n      setPortfolio(false);\n      dispatch({\n        type: \"UPDATE\",\n        payload: _objectSpread(_objectSpread({}, donor), {}, {\n          portfolios: donor.portfolios.concat(data.createPortfolio.portfolio),\n          creditAmount: donor.creditAmount - data.updatePortfolio.portfolio.paymentSize\n        })\n      });\n      setCreateError(\"Review Added succesfully!\");\n      setCreateLoading(false);\n      handleReset();\n    },\n    onError: function onError(error) {\n      console.log(error);\n      setCreateError(\"Sorry an error occurred. Please try again!\");\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createPortfolio = _useMutation2[0];\n\n  var schemas = [{\n    paymentSize: Yup.number().required(\"Please enter a donation paymentSize.\"),\n    period: Yup.string().required(\"Please enter the period.\")\n  }];\n\n  var _useFormik = useFormik({\n    initialValues: {\n      paymentSize: 0,\n      period: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      console.log(\"Portfolio => On Submit\");\n      console.log(values.period, \"Period:\");\n      setCreateLoading(true);\n      setCreateError(null);\n\n      if (donor.creditAmount >= values.paymentSize) {\n        createPortfolio({\n          variables: {\n            field: {\n              data: {\n                paymentSize: parseInt(values.paymentSize),\n                period: values.period,\n                donor: donor ? donor.id : null,\n                organization: organizationID,\n                paymentDate: moment().format(\"YYYY-MM-DD\")\n              }\n            }\n          }\n        });\n      } else {\n        setCreateLoading(false);\n        setCreateError(\"Insufficent balance. Please refill your account & then add to portfolio\");\n      }\n    },\n    validationSchema: Yup.object().shape(schemas[0])\n  }),\n      handleBlur = _useFormik.handleBlur,\n      handleChange = _useFormik.handleChange,\n      handleSubmit = _useFormik.handleSubmit,\n      handleReset = _useFormik.handleReset,\n      values = _useFormik.values,\n      touched = _useFormik.touched,\n      errors = _useFormik.errors,\n      setFieldValue = _useFormik.setFieldValue;\n\n  if (error) {\n    return __jsx(Error, {\n      statusCode: 404\n    });\n  }\n\n  if (!error && !loading && !data) {\n    return __jsx(Error, {\n      statusCode: 404\n    });\n  }\n\n  if (loading && !data) {\n    return __jsx(Container, {\n      maxWidth: \"xl\",\n      style: {\n        minHeight: \"100vh\",\n        background: \"#F2F2F2\",\n        textAlign: \"center\",\n        paddingTop: \"30%\"\n      }\n    }, __jsx(CircularProgress, {\n      color: \"secondary\"\n    }));\n  }\n\n  if (data && !loading) {\n    return __jsx(ThemeProvider, {\n      theme: charityTheme\n    }, __jsx(Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Organization Page\"), __jsx(\"meta\", {\n      name: \"Description\",\n      content: \"React next landing page\"\n    }), __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: \"#FCF22B\"\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1.0\"\n    }), __jsx(\"link\", {\n      href: \"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700,800&display=swap\",\n      rel: \"stylesheet\"\n    })), __jsx(ResetCSS, null), __jsx(GlobalStyle, null), __jsx(CharityWrapper, null, __jsx(Sticky, {\n      top: 0,\n      innerZ: 9999,\n      activeClass: \"sticky-nav-active\"\n    }, __jsx(Navbar, null)), __jsx(DrawerProvider, null, __jsx(DrawerSection, null)), __jsx(Container, {\n      maxWidth: \"xl\",\n      style: {\n        minHeight: \"100vh\",\n        background: \"#F2F2F2\",\n        padding: 0\n      }\n    }, __jsx(Grid, {\n      container: true,\n      style: {\n        paddingLeft: 0\n      }\n    }, __jsx(Grid, {\n      item: true,\n      container: true,\n      md: 12,\n      style: {\n        backgroundImage: \"url(\".concat(process.env.PLAIN_URL).concat(data.organizations[0].coverImage.url, \")\"),\n        backgroundSize: \"cover\",\n        minHeight: \"525px\"\n      }\n    })), __jsx(Grid, {\n      item: true,\n      md: 4\n    }, __jsx(Box, {\n      width: 1,\n      px: 20,\n      my: -10\n    }, __jsx(\"img\", {\n      src: \"\".concat(process.env.PLAIN_URL).concat(data.organizations[0].profilePicture.url),\n      height: \"150px\",\n      width: \"175px\",\n      style: {\n        borderRadius: \"4px\",\n        objectFit: \"cover\",\n        cursor: \"pointer\"\n      }\n    }))), __jsx(Container, {\n      maxWidth: \"lg\"\n    }, __jsx(Grid, {\n      container: true,\n      style: {\n        background: \"#F2F2F2\",\n        paddingTop: \"50px\"\n      },\n      spacing: 2\n    }, __jsx(Grid, {\n      item: true,\n      md: 8,\n      style: {\n        marginLeft: \"60px\",\n        marginTop: \"50px\"\n      }\n    }, __jsx(Heading, {\n      as: \"h1\",\n      style: {\n        marginBottom: 10\n      },\n      content: data.organizations[0].organizationName\n    }), __jsx(Text, {\n      content: data.organizations[0].mission\n    })), __jsx(Grid, {\n      container: true,\n      style: {\n        marginLeft: \"65px\"\n      }\n    }, __jsx(Grid, {\n      item: true,\n      md: 7,\n      style: {\n        display: \"flex\"\n      }\n    }, donor[\"id\"] ? donor.user.role.name == \"Donor\" && donor.portfolios.filter(function (portfolio) {\n      return portfolio.organization.id == data.organizations[0].id;\n    }).length ? __jsx(Link, {\n      href: \"/portfolio\"\n    }, __jsx(Button, {\n      title: \"Added to Portfolio\",\n      variant: \"outlined\",\n      style: {\n        marginTop: \"0px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        minWidth: \"200px\",\n        height: \"auto\",\n        border: \"0\",\n        fontSize: \"15px\",\n        fontWeight: \"700\",\n        borderRadius: \"10px\",\n        cursor: \"pointer\",\n        color: \"#FFFFFF\",\n        backgroundColor: \"#05B890\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        zIndex: \"1\"\n      }\n    })) : donor.user.role.name == \"Donor\" ? __jsx(Button, {\n      title: \"Add to Portfolio\",\n      variant: \"textButton\",\n      onClick: handlePortfolio,\n      style: {\n        marginTop: \"0px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        minWidth: \"200px\",\n        height: \"auto\",\n        border: \"0\",\n        fontSize: \"15px\",\n        fontWeight: \"700\",\n        borderRadius: \"10px\",\n        cursor: \"pointer\",\n        color: \"#FFFFFF\",\n        backgroundColor: \"#05B890\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        zIndex: \"1\"\n      }\n    }) : null : null, portfolio ? __jsx(Dialog, {\n      open: portfolio,\n      onClose: function onClose() {\n        return setPortfolio(false);\n      },\n      \"aria-labelledby\": \"form-dialog-title\"\n    }, __jsx(DialogTitle, {\n      id: \"form-dialog-title\"\n    }, \"Add to portfolio\"), __jsx(DialogContent, null, __jsx(DialogContentText, null, \" By adding this organization to your portfolio you give your consent to one-time or monthly deduction from your wallet. This amount will be transferred into  \".concat(data.organizations[0].organizationName, \"'s account\")), __jsx(TextField, {\n      type: \"number\",\n      autoFocus: true,\n      name: \"paymentSize\",\n      value: values.paymentSize,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      error: errors.paymentSize && touched.paymentSize,\n      helperText: errors.paymentSize && touched.paymentSize ? errors.paymentSize : null,\n      label: \"paymentSize\",\n      fullWidth: true,\n      style: {\n        marginBottom: \"20px\"\n      }\n    }), __jsx(RadioGroup, {\n      name: \"period\",\n      value: paymentPolicy.id,\n      items: paymentPolicy,\n      onUpdate: function onUpdate(value) {\n        return setFieldValue(\"period\", value);\n      }\n    }), createError ? __jsx(Box, {\n      width: \"100%\",\n      p: 2\n    }, __jsx(Text, {\n      content: createError\n    })) : null), __jsx(DialogActions, null, __jsx(Button, {\n      onClick: function onClick() {\n        return setPortfolio(false);\n      },\n      title: \"Cancel\",\n      variant: \"extendedFab\"\n    }), __jsx(Button, {\n      title: \"Add\",\n      variant: \"extendedFab\",\n      onClick: handleSubmit,\n      disabled: createLoading,\n      isLoading: createLoading\n    }))) : null, __jsx(\"a\", {\n      href: \"mailto:\".concat(data.organizations[0].user.email)\n    }, __jsx(Button, {\n      title: \"Contact\",\n      variant: \"outlined\",\n      style: {\n        marginTop: \"0px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        minWidth: \"200px\",\n        height: \"auto\",\n        border: \"1\",\n        borderColor: \"#3E2672\",\n        fontSize: \"15px\",\n        fontWeight: \"700\",\n        borderRadius: \"10px\",\n        cursor: \"pointer\",\n        color: \"#060F1E\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        zIndex: \"1\"\n      }\n    })))), __jsx(Grid, {\n      container: true,\n      item: true,\n      md: 12,\n      style: {\n        marginTop: \"20px\"\n      }\n    }, __jsx(Box, {\n      width: \"100%\"\n    }, __jsx(Paper, null, __jsx(ScrollableTabsButtonForce, {\n      organization: data.organizations[0]\n    })))))), __jsx(Grid, {\n      item: true,\n      container: true,\n      md: 12,\n      style: {\n        background: \"#F2F2F2\",\n        minHeight: \"100px\"\n      }\n    })), __jsx(Footer, null))));\n  }\n}\n\nOrganization.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var query;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query;\n            console.log(query);\n\n            if (!query[\"organization\"]) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              organizationID: query.organization\n            });\n\n          case 6:\n            return _context.abrupt(\"return\", {\n              organizationID: \"\"\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Organization;","map":null,"metadata":{},"sourceType":"module"}