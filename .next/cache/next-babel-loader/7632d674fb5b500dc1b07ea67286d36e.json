{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { useData, useDispatchUser } from \"../../../../lib/userData\";\nimport Text from \"../Text\";\nimport { GET_PORTFOLIOS } from \"../../../../lib/queries\";\nimport { DELETE_PORTFOLIO } from \"../../../../lib/mutations\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport moment from \"moment\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    overflow: \"auto\",\n    maxHeight: \"460px\",\n    backgroundColor: theme.palette.background.paper\n  },\n  inline: {\n    display: \"inline\"\n  }\n}));\nexport default function AlignItemsList({\n  refetchNow,\n  setRefetchNow\n}) {\n  const classes = useStyles();\n  const donor = useData();\n  const dispatch = useDispatchUser();\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(GET_PORTFOLIOS, {\n    variables: {\n      where: {\n        donor: donor ? donor.id : \"\"\n      },\n      sort: \"createdAt:desc\",\n      start: 0,\n      limit: null\n    },\n    fetchPolicy: \"cache-and-network\" //skip: !project,\n\n  });\n  const [deletePortfolio] = useMutation(DELETE_PORTFOLIO, {\n    onCompleted: data => {\n      console.log(data, \"on complete deletion\");\n      dispatch({\n        type: \"UPDATE\",\n        payload: _objectSpread(_objectSpread({}, donor), {}, {\n          portfolios: donor.portfolios.filter(portfolio => portfolio.id != data.deletePortfolio.portfolio.id)\n        })\n      });\n      refetch();\n    },\n    onError: error => {\n      console.log(error, \"Error @ delete portfolio\");\n    }\n  });\n  useEffect(() => {\n    if (refetchNow) {\n      refetch();\n      setRefetchNow(false);\n    }\n  }, [refetchNow]);\n\n  const handleDeletePortfolio = pID => {\n    console.log(\"Handle Delete Portfolio\", pID);\n    deletePortfolio({\n      variables: {\n        fields: {\n          where: {\n            id: pID\n          }\n        }\n      }\n    });\n  };\n\n  return __jsx(List, {\n    className: classes.root\n  }, data ? data.portfolios.map(portfolio => {\n    return __jsx(React.Fragment, null, __jsx(ListItem, {\n      alignItems: \"flex-start\"\n    }, __jsx(ListItemAvatar, null, __jsx(Avatar, {\n      alt: portfolio.organization.organizationName,\n      src: portfolio.organization.profilePicture ? `${process.env.PLAIN_URL}${portfolio.organization.profilePicture.url}` : null\n    })), __jsx(ListItemText, {\n      primary: portfolio.organization.organizationName,\n      secondary: __jsx(React.Fragment, null, __jsx(Typography, {\n        component: \"span\",\n        variant: \"body2\",\n        className: classes.inline,\n        color: \"textPrimary\"\n      }, `Rs. ${portfolio.paymentSize}`), ` â€” ${portfolio.period}`)\n    }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"delete\",\n      onClick: () => handleDeletePortfolio(portfolio.id)\n    }, __jsx(DeleteIcon, null)))), __jsx(Divider, {\n      variant: \"inset\",\n      component: \"li\"\n    }));\n  }) : __jsx(React.Fragment, null, __jsx(ListItem, {\n    alignItems: \"flex-start\"\n  }, __jsx(ListItemAvatar, null, __jsx(Skeleton, {\n    animation: \"wave\",\n    variant: \"circle\",\n    width: 40,\n    height: 40\n  })), __jsx(ListItemText, {\n    disableTypography: true,\n    primary: __jsx(Skeleton, {\n      animation: \"wave\",\n      height: 10,\n      width: \"80%\"\n    }),\n    secondary: __jsx(Skeleton, {\n      animation: \"wave\",\n      height: 10,\n      width: \"60%\"\n    })\n  })), __jsx(ListItem, {\n    alignItems: \"flex-start\"\n  }, __jsx(ListItemAvatar, null, __jsx(Skeleton, {\n    animation: \"wave\",\n    variant: \"circle\",\n    width: 40,\n    height: 40\n  })), __jsx(ListItemText, {\n    disableTypography: true,\n    primary: __jsx(Skeleton, {\n      animation: \"wave\",\n      height: 10,\n      width: \"80%\"\n    }),\n    secondary: __jsx(Skeleton, {\n      animation: \"wave\",\n      height: 10,\n      width: \"60%\"\n    })\n  })), __jsx(ListItem, {\n    alignItems: \"flex-start\"\n  }, __jsx(ListItemAvatar, null, __jsx(Skeleton, {\n    animation: \"wave\",\n    variant: \"circle\",\n    width: 40,\n    height: 40\n  })), __jsx(ListItemText, {\n    disableTypography: true,\n    primary: __jsx(Skeleton, {\n      animation: \"wave\",\n      height: 10,\n      width: \"80%\"\n    }),\n    secondary: __jsx(Skeleton, {\n      animation: \"wave\",\n      height: 10,\n      width: \"60%\"\n    })\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}